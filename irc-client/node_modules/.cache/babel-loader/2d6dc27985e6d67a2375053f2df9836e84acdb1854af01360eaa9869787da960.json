{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\momod\\\\T-JSF-600-PAR_2\\\\irc-client\\\\src\\\\Chatcomponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport './Chatcomponent.css';\nimport socket from './socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = ({\n  username,\n  channel,\n  channels,\n  setChannels\n}) => {\n  _s();\n  const storedUserId = localStorage.getItem('userId');\n  const storedUsername = localStorage.getItem('username');\n  if (!storedUserId || !storedUsername) {\n    console.warn(\"⚠️ userId ou username manquant dans localStorage !\");\n    alert(\"Votre session a expiré. Veuillez vous reconnecter.\");\n    // Rediriger l'utilisateur vers la page de connexion si besoin\n    // window.location.href = \"/login\";\n  }\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n  console.log(\"🔎 Utilisateur :\", {\n    storedUsername,\n    storedUserId\n  });\n\n  // Charger l'historique du channel actif\n  useEffect(() => {\n    if (channel && channel._id) {\n      socket.emit('fetchChannelMessages', channel._id);\n      setMessages([]); // Reset messages lors du changement de channel\n    }\n  }, [channel]);\n\n  // Écoute des messages du channel, messages système et privés\n  useEffect(() => {\n    const handleNewMessage = msg => {\n      if (msg.channel === channel._id) setMessages(prev => [...prev, msg]);\n    };\n    const handleSystemMessage = msg => {\n      if (msg.channel === channel._id) setMessages(prev => [...prev, {\n        ...msg,\n        system: true\n      }]);\n    };\n    const handleLoadChannelMessages = msgs => {\n      setMessages(msgs);\n    };\n    const handlePrivateMessage = msg => {\n      if (msg.to === storedUserId || msg.userId === storedUserId) setMessages(prev => [...prev, {\n        ...msg,\n        private: true\n      }]);\n    };\n    socket.on('newMessage', handleNewMessage);\n    socket.on('systemMessage', handleSystemMessage);\n    socket.on('loadChannelMessages', handleLoadChannelMessages);\n    socket.on('privateMessage', handlePrivateMessage);\n    return () => {\n      socket.off('newMessage', handleNewMessage);\n      socket.off('systemMessage', handleSystemMessage);\n      socket.off('loadChannelMessages', handleLoadChannelMessages);\n      socket.off('privateMessage', handlePrivateMessage);\n    };\n  }, [channel, storedUserId]);\n\n  // Scroll automatique\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Gestion de l'envoi de message\n  const handleSendMessage = () => {\n    if (!storedUserId || !storedUsername || !channel || !channel._id) return;\n    if (message.trim() === '') return;\n    if (message.startsWith('/create ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez spécifier un nom pour le canal.');\n      createChannel(channelName);\n      return;\n    }\n    if (message.startsWith('/msg ')) {\n      const [_, toNickname, ...msgParts] = message.split(' ');\n      const msgText = msgParts.join(' ');\n      if (!toNickname || !msgText) return alert('Usage: /msg nickname message');\n      // Trouver l'userId du destinataire\n      fetch(`http://localhost:5000/api/users?username=${toNickname}`).then(res => res.json()).then(data => {\n        if (!data || !data._id) return alert('Utilisateur non trouvé');\n        socket.emit('sendPrivateMessage', {\n          userId: storedUserId,\n          username: storedUsername,\n          toUserId: data._id,\n          text: msgText\n        });\n        setMessage('');\n      });\n      return;\n    }\n    // Message normal au channel\n    socket.emit('sendMessage', {\n      userId: storedUserId,\n      username: storedUsername,\n      channelId: channel._id,\n      text: message.trim()\n    });\n    setMessage('');\n  };\n\n  // Création de channel\n  const createChannel = async channelName => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/api/channels', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: channelName,\n          creator: storedUsername\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setChannels(prev => [...prev, data]);\n      } else {\n        alert(data.message);\n      }\n    } catch (err) {\n      alert('Erreur lors de la création du canal');\n    }\n    setMessage('');\n  };\n\n  // Gestion de la touche \"Entrée\"\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-area\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message${msg.system ? ' system' : ''}${msg.private ? ' private' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message-meta\",\n          children: [msg.system ? '[SYSTÈME]' : msg.private ? '[PRIVÉ]' : msg.username, \" \", msg.createdAt ? new Date(msg.createdAt).toLocaleString() : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        onKeyDown: handleKeyDown,\n        placeholder: \"Tapez votre message, /create [nom] ou /msg [pseudo] [message]...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatComponent, \"mrzO88jBQmJfUNtWUeukQppgA/o=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","socket","jsxDEV","_jsxDEV","ChatComponent","username","channel","channels","setChannels","_s","storedUserId","localStorage","getItem","storedUsername","console","warn","alert","message","setMessage","messages","setMessages","messagesEndRef","log","_id","emit","handleNewMessage","msg","prev","handleSystemMessage","system","handleLoadChannelMessages","msgs","handlePrivateMessage","to","userId","private","on","off","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","startsWith","channelName","split","createChannel","_","toNickname","msgParts","msgText","join","fetch","then","res","json","data","toUserId","text","channelId","token","response","method","headers","body","JSON","stringify","name","creator","ok","err","handleKeyDown","e","key","preventDefault","className","children","map","index","createdAt","Date","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","target","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/momod/T-JSF-600-PAR_2/irc-client/src/Chatcomponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\nimport './Chatcomponent.css';\r\nimport socket from './socket';\r\n\r\nconst ChatComponent = ({ username, channel, channels, setChannels }) => {\r\n    const storedUserId = localStorage.getItem('userId');\r\n    const storedUsername = localStorage.getItem('username');\r\n\r\n    if (!storedUserId || !storedUsername) {\r\n        console.warn(\"⚠️ userId ou username manquant dans localStorage !\");\r\n        alert(\"Votre session a expiré. Veuillez vous reconnecter.\");\r\n        // Rediriger l'utilisateur vers la page de connexion si besoin\r\n        // window.location.href = \"/login\";\r\n    }\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    console.log(\"🔎 Utilisateur :\", { storedUsername, storedUserId });\r\n\r\n    // Charger l'historique du channel actif\r\n    useEffect(() => {\r\n        if (channel && channel._id) {\r\n            socket.emit('fetchChannelMessages', channel._id);\r\n            setMessages([]); // Reset messages lors du changement de channel\r\n        }\r\n    }, [channel]);\r\n\r\n    // Écoute des messages du channel, messages système et privés\r\n    useEffect(() => {\r\n        const handleNewMessage = (msg) => {\r\n            if (msg.channel === channel._id) setMessages((prev) => [...prev, msg]);\r\n        };\r\n        const handleSystemMessage = (msg) => {\r\n            if (msg.channel === channel._id) setMessages((prev) => [...prev, { ...msg, system: true }]);\r\n        };\r\n        const handleLoadChannelMessages = (msgs) => {\r\n            setMessages(msgs);\r\n        };\r\n        const handlePrivateMessage = (msg) => {\r\n            if (msg.to === storedUserId || msg.userId === storedUserId) setMessages((prev) => [...prev, { ...msg, private: true }]);\r\n        };\r\n        socket.on('newMessage', handleNewMessage);\r\n        socket.on('systemMessage', handleSystemMessage);\r\n        socket.on('loadChannelMessages', handleLoadChannelMessages);\r\n        socket.on('privateMessage', handlePrivateMessage);\r\n        return () => {\r\n            socket.off('newMessage', handleNewMessage);\r\n            socket.off('systemMessage', handleSystemMessage);\r\n            socket.off('loadChannelMessages', handleLoadChannelMessages);\r\n            socket.off('privateMessage', handlePrivateMessage);\r\n        };\r\n    }, [channel, storedUserId]);\r\n\r\n    // Scroll automatique\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }, [messages]);\r\n\r\n    // Gestion de l'envoi de message\r\n    const handleSendMessage = () => {\r\n        if (!storedUserId || !storedUsername || !channel || !channel._id) return;\r\n        if (message.trim() === '') return;\r\n        if (message.startsWith('/create ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez spécifier un nom pour le canal.');\r\n            createChannel(channelName);\r\n            return;\r\n        }\r\n        if (message.startsWith('/msg ')) {\r\n            const [_, toNickname, ...msgParts] = message.split(' ');\r\n            const msgText = msgParts.join(' ');\r\n            if (!toNickname || !msgText) return alert('Usage: /msg nickname message');\r\n            // Trouver l'userId du destinataire\r\n            fetch(`http://localhost:5000/api/users?username=${toNickname}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (!data || !data._id) return alert('Utilisateur non trouvé');\r\n                    socket.emit('sendPrivateMessage', {\r\n                        userId: storedUserId,\r\n                        username: storedUsername,\r\n                        toUserId: data._id,\r\n                        text: msgText,\r\n                    });\r\n                    setMessage('');\r\n                });\r\n            return;\r\n        }\r\n        // Message normal au channel\r\n        socket.emit('sendMessage', {\r\n            userId: storedUserId,\r\n            username: storedUsername,\r\n            channelId: channel._id,\r\n            text: message.trim(),\r\n        });\r\n        setMessage('');\r\n    };\r\n\r\n    // Création de channel\r\n    const createChannel = async (channelName) => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            const response = await fetch('http://localhost:5000/api/channels', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify({ name: channelName, creator: storedUsername }),\r\n            });\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setChannels((prev) => [...prev, data]);\r\n            } else {\r\n                alert(data.message);\r\n            }\r\n        } catch (err) {\r\n            alert('Erreur lors de la création du canal');\r\n        }\r\n        setMessage('');\r\n    };\r\n\r\n    // Gestion de la touche \"Entrée\"\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            handleSendMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-box\">\r\n            <div className=\"message-area\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message${msg.system ? ' system' : ''}${msg.private ? ' private' : ''}`}>\r\n                        <p className=\"message-meta\">\r\n                            {msg.system ? '[SYSTÈME]' : msg.private ? '[PRIVÉ]' : msg.username} {msg.createdAt ? new Date(msg.createdAt).toLocaleString() : ''}\r\n                        </p>\r\n                        <p>{msg.text}</p>\r\n                    </div>\r\n                ))}\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n            <div className=\"input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    onKeyDown={handleKeyDown}\r\n                    placeholder=\"Tapez votre message, /create [nom] ou /msg [pseudo] [message]...\"\r\n                />\r\n                <button onClick={handleSendMessage}>Envoyer</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}