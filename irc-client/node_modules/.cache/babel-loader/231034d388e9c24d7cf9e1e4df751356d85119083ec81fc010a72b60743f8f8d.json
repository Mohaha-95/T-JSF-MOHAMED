{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\momod\\\\T-JSF-600-PAR_2\\\\irc-client\\\\src\\\\Chatcomponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatcomponent.css';\nimport socket from './socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = ({\n  username,\n  channel,\n  channels,\n  setChannels,\n  fetchChannels\n}) => {\n  _s();\n  const storedUserId = localStorage.getItem('userId');\n  const storedUsername = localStorage.getItem('username');\n  if (!storedUserId || !storedUsername) {\n    console.warn(\"‚ö†Ô∏è userId ou username manquant dans localStorage !\");\n    alert(\"Votre session a expir√©. Veuillez vous reconnecter.\");\n    // Rediriger l'utilisateur vers la page de connexion si besoin\n    // window.location.href = \"/login\";\n  }\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState({}); // { [channelId]: [messages...] }\n  const messagesEndRef = useRef(null);\n  const lastJoinedChannelRef = useRef(null);\n\n  // Affiche les messages du channel courant\n  const currentMessages = channel && channel._id && messages[channel._id] ? messages[channel._id] : [];\n  console.log(\"üîé Utilisateur :\", {\n    storedUsername,\n    storedUserId\n  });\n\n  // Charger l'historique du channel actif\n  useEffect(() => {\n    if (channel && channel._id) {\n      socket.emit('fetchChannelMessages', channel._id);\n    }\n  }, [channel]);\n\n  // √âcoute des messages syst√®me pour tous les channels de l'utilisateur\n  useEffect(() => {\n    const handleSystemMessage = msg => {\n      if (!msg.channel) return;\n      // Log pour debug\n      console.log('[SYSTEM]', msg);\n      // Affiche le message si le channel courant correspond (comparaison en string)\n      if (channel && String(msg.channel) === String(channel._id)) {\n        let customText = msg.text;\n        if (msg.text && msg.text.includes('a rejoint le channel')) {\n          const user = msg.text.split(' ')[0];\n          customText = `${user} a rejoint le canal, souhaitez-lui la bienvenue !`;\n        }\n        if (msg.text && msg.text.includes('a quitt√© le channel')) {\n          const user = msg.text.split(' ')[0];\n          customText = `${user} a quitt√© le canal.`;\n        }\n        setMessages(prev => ({\n          ...prev,\n          [channel._id]: [...(prev[channel._id] || []), {\n            ...msg,\n            system: true,\n            text: customText\n          }]\n        }));\n      }\n    };\n    socket.on('systemMessage', handleSystemMessage);\n    return () => {\n      socket.off('systemMessage', handleSystemMessage);\n    };\n  }, [channel]);\n\n  // √âcoute des messages du channel, messages syst√®me et priv√©s\n  useEffect(() => {\n    const handleNewMessage = msg => {\n      if (!msg.channel) return;\n      setMessages(prev => ({\n        ...prev,\n        [msg.channel]: [...(prev[msg.channel] || []), msg]\n      }));\n    };\n    const handleLoadChannelMessages = msgs => {\n      if (channel && channel._id) {\n        setMessages(prev => ({\n          ...prev,\n          [channel._id]: msgs\n        }));\n      }\n    };\n    const handlePrivateMessage = msg => {\n      if (msg.to === storedUserId || msg.userId === storedUserId) {\n        if (channel && channel._id) {\n          setMessages(prev => ({\n            ...prev,\n            [channel._id]: [...(prev[channel._id] || []), {\n              ...msg,\n              private: true\n            }]\n          }));\n        }\n      }\n    };\n    socket.on('newMessage', handleNewMessage);\n    socket.on('loadChannelMessages', handleLoadChannelMessages);\n    socket.on('privateMessage', handlePrivateMessage);\n    return () => {\n      socket.off('newMessage', handleNewMessage);\n      socket.off('loadChannelMessages', handleLoadChannelMessages);\n      socket.off('privateMessage', handlePrivateMessage);\n    };\n  }, [channel, storedUserId]);\n\n  // √Ä la connexion, envoie l'userId au serveur pour le mapping userId <-> socket.id\n  useEffect(() => {\n    if (storedUserId) {\n      socket.emit('registerUser', storedUserId);\n    }\n  }, [storedUserId]);\n\n  // S'abonner √† la room du channel s√©lectionn√© (clic)\n  useEffect(() => {\n    if (channel && channel._id && storedUserId) {\n      if (lastJoinedChannelRef.current !== channel._id) {\n        socket.emit('joinChannel', {\n          userId: storedUserId,\n          channelId: channel._id\n        });\n        lastJoinedChannelRef.current = channel._id;\n      }\n    }\n  }, [channel === null || channel === void 0 ? void 0 : channel._id, storedUserId]);\n\n  // Scroll automatique\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Gestion de l'envoi de message\n  const handleSendMessage = () => {\n    if (!storedUserId || !storedUsername) return;\n    if (message.trim() === '') return;\n    if (message.startsWith('/create ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez sp√©cifier un nom pour le canal.');\n      createChannel(channelName);\n      return;\n    }\n    if (message.startsWith('/join ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† rejoindre.');\n      fetch(`http://localhost:5000/api/channels?all=1`).then(res => res.json()).then(data => {\n        // Recherche stricte, insensible √† la casse\n        const found = data.find(c => c.name.toLowerCase() === channelName.toLowerCase());\n        if (!found) {\n          setMessages(prev => ({\n            ...prev,\n            [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n              system: true,\n              text: `Channel \"${channelName}\" introuvable.`\n            }]\n          }));\n          return;\n        }\n        const channelId = found._id;\n        fetch('http://localhost:5000/api/channels/join', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId: storedUserId,\n            channelId\n          })\n        }).then(() => {\n          setMessages(prev => ({\n            ...prev,\n            [channelId]: [...(prev[channelId] || []), {\n              system: true,\n              text: `Rejoint le channel \"${channelName}\".`\n            }]\n          }));\n          if (fetchChannels) fetchChannels();\n          socket.emit('joinChannel', {\n            userId: storedUserId,\n            channelId\n          });\n        });\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/quit ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† quitter.');\n      fetch(`http://localhost:5000/api/channels?all=1`).then(res => res.json()).then(data => {\n        // Recherche stricte, insensible √† la casse\n        const found = data.find(c => c.name.toLowerCase() === channelName.toLowerCase());\n        if (!found) {\n          setMessages(prev => ({\n            ...prev,\n            [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n              system: true,\n              text: `Channel \"${channelName}\" introuvable.`\n            }]\n          }));\n          return;\n        }\n        const channelId = found._id;\n        fetch('http://localhost:5000/api/channels/quit', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId: storedUserId,\n            channelId\n          })\n        }).then(() => {\n          setMessages(prev => ({\n            ...prev,\n            [channelId]: [...(prev[channelId] || []), {\n              system: true,\n              text: `Quitt√© le channel \"${channelName}\".`\n            }]\n          }));\n          if (fetchChannels) fetchChannels();\n          socket.emit('quitChannel', {\n            userId: storedUserId,\n            channelId\n          });\n        });\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/msg ')) {\n      const [_, toNickname, ...msgParts] = message.split(' ');\n      const msgText = msgParts.join(' ');\n      if (!toNickname || !msgText) return alert('Usage: /msg nickname message');\n      fetch(`http://localhost:5000/api/channels/${channel === null || channel === void 0 ? void 0 : channel._id}/users`).then(res => res.json()).then(users => {\n        if (!users.includes(toNickname)) {\n          setMessages(prev => ({\n            ...prev,\n            [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n              system: true,\n              text: `Utilisateur \"${toNickname}\" non trouv√© dans ce channel.`\n            }]\n          }));\n          return;\n        }\n        // Envoie le message priv√© via socket\n        socket.emit('sendPrivateMessage', {\n          userId: storedUserId,\n          username: storedUsername,\n          toUsername: toNickname,\n          text: msgText\n        });\n        // Ne pas ajouter de setMessages ici pour √©viter les doublons\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/list')) {\n      const parts = message.split(' ');\n      const filter = parts[1] || '';\n      fetch(`http://localhost:5000/api/channels${filter ? `?name=${filter}` : ''}`).then(res => res.json()).then(data => {\n        setMessages(prev => ({\n          ...prev,\n          [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n            system: true,\n            text: `Channels disponibles : ${data.map(c => c.name).join(', ')}`\n          }]\n        }));\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/users')) {\n      if (!channel || !channel._id) return;\n      fetch(`http://localhost:5000/api/channels/${channel._id}/users`).then(res => res.json()).then(data => {\n        setMessages(prev => ({\n          ...prev,\n          [channel._id]: [...(prev[channel._id] || []), {\n            system: true,\n            text: `Utilisateurs dans ce channel : ${data.join(', ')}`\n          }]\n        }));\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/delete ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† supprimer.');\n      const token = localStorage.getItem('token');\n      fetch(`http://localhost:5000/api/channels`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: channelName\n        })\n      }).then(res => res.json()).then(data => {\n        setMessages(prev => ({\n          ...prev,\n          [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n            system: true,\n            text: data.message || 'Canal supprim√©.'\n          }]\n        }));\n        if (fetchChannels) fetchChannels();\n      });\n      setMessage('');\n      return;\n    }\n    if (!channel || !channel._id) {\n      setMessages(prev => ({\n        ...prev,\n        [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n          system: true,\n          text: 'Veuillez cr√©er ou s√©lectionner un channel.'\n        }]\n      }));\n      setMessage('');\n      return;\n    }\n    // Message normal au channel (optimistic update supprim√© pour √©viter le doublon)\n    socket.emit('sendMessage', {\n      userId: storedUserId,\n      username: storedUsername,\n      channelId: channel._id,\n      text: message.trim()\n    });\n    setMessage('');\n  };\n\n  // Cr√©ation de channel\n  const createChannel = async channelName => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/api/channels', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: channelName,\n          creator: storedUsername\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessages(prev => ({\n          ...prev,\n          [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n            system: true,\n            text: `Channel \"${channelName}\" cr√©√© !`\n          }]\n        }));\n        setChannels(prev => [...prev, data]);\n        if (fetchChannels) fetchChannels();\n      } else {\n        setMessages(prev => ({\n          ...prev,\n          [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n            system: true,\n            text: data.message || 'Erreur lors de la cr√©ation du canal.'\n          }]\n        }));\n      }\n    } catch (err) {\n      setMessages(prev => ({\n        ...prev,\n        [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n          system: true,\n          text: 'Erreur lors de la cr√©ation du canal (r√©seau).'\n        }]\n      }));\n    }\n    setMessage('');\n  };\n\n  // Gestion de la touche \"Entr√©e\"\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-area\",\n      children: [currentMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message${msg.system ? ' system' : ''}${msg.private ? ' private' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message-meta\",\n          children: [msg.system ? '[SYST√àME]' : msg.private ? '[PRIV√â]' : msg.userId === storedUserId || msg.username === storedUsername ? 'Vous' : msg.username, \" \", msg.createdAt ? new Date(msg.createdAt).toLocaleString() : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        onKeyDown: handleKeyDown,\n        placeholder: \"Tapez votre message, /create [nom] ou /msg [pseudo] [message]...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatComponent, \"kuHk9PpOtBlZKP+tRSm3CLw1yE0=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","socket","jsxDEV","_jsxDEV","ChatComponent","username","channel","channels","setChannels","fetchChannels","_s","storedUserId","localStorage","getItem","storedUsername","console","warn","alert","message","setMessage","messages","setMessages","messagesEndRef","lastJoinedChannelRef","currentMessages","_id","log","emit","handleSystemMessage","msg","String","customText","text","includes","user","split","prev","system","on","off","handleNewMessage","handleLoadChannelMessages","msgs","handlePrivateMessage","to","userId","private","current","channelId","_messagesEndRef$curre","scrollIntoView","behavior","handleSendMessage","trim","startsWith","channelName","createChannel","fetch","then","res","json","data","found","find","c","name","toLowerCase","method","headers","body","JSON","stringify","_","toNickname","msgParts","msgText","join","users","toUsername","parts","filter","map","token","response","creator","ok","err","handleKeyDown","e","key","preventDefault","className","children","index","createdAt","Date","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","target","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/momod/T-JSF-600-PAR_2/irc-client/src/Chatcomponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chatcomponent.css';\r\nimport socket from './socket';\r\n\r\nconst ChatComponent = ({ username, channel, channels, setChannels, fetchChannels }) => {\r\n    const storedUserId = localStorage.getItem('userId');\r\n    const storedUsername = localStorage.getItem('username');\r\n\r\n    if (!storedUserId || !storedUsername) {\r\n        console.warn(\"‚ö†Ô∏è userId ou username manquant dans localStorage !\");\r\n        alert(\"Votre session a expir√©. Veuillez vous reconnecter.\");\r\n        // Rediriger l'utilisateur vers la page de connexion si besoin\r\n        // window.location.href = \"/login\";\r\n    }\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState({}); // { [channelId]: [messages...] }\r\n    const messagesEndRef = useRef(null);\r\n    const lastJoinedChannelRef = useRef(null);\r\n\r\n    // Affiche les messages du channel courant\r\n    const currentMessages = channel && channel._id && messages[channel._id] ? messages[channel._id] : [];\r\n\r\n    console.log(\"üîé Utilisateur :\", { storedUsername, storedUserId });\r\n\r\n    // Charger l'historique du channel actif\r\n    useEffect(() => {\r\n        if (channel && channel._id) {\r\n            socket.emit('fetchChannelMessages', channel._id);\r\n        }\r\n    }, [channel]);\r\n\r\n    // √âcoute des messages syst√®me pour tous les channels de l'utilisateur\r\n    useEffect(() => {\r\n        const handleSystemMessage = (msg) => {\r\n            if (!msg.channel) return;\r\n            // Log pour debug\r\n            console.log('[SYSTEM]', msg);\r\n            // Affiche le message si le channel courant correspond (comparaison en string)\r\n            if (channel && String(msg.channel) === String(channel._id)) {\r\n                let customText = msg.text;\r\n                if (msg.text && msg.text.includes('a rejoint le channel')) {\r\n                    const user = msg.text.split(' ')[0];\r\n                    customText = `${user} a rejoint le canal, souhaitez-lui la bienvenue !`;\r\n                }\r\n                if (msg.text && msg.text.includes('a quitt√© le channel')) {\r\n                    const user = msg.text.split(' ')[0];\r\n                    customText = `${user} a quitt√© le canal.`;\r\n                }\r\n                setMessages(prev => ({\r\n                    ...prev,\r\n                    [channel._id]: [...(prev[channel._id] || []), { ...msg, system: true, text: customText }]\r\n                }));\r\n            }\r\n        };\r\n        socket.on('systemMessage', handleSystemMessage);\r\n        return () => {\r\n            socket.off('systemMessage', handleSystemMessage);\r\n        };\r\n    }, [channel]);\r\n\r\n    // √âcoute des messages du channel, messages syst√®me et priv√©s\r\n    useEffect(() => {\r\n        const handleNewMessage = (msg) => {\r\n            if (!msg.channel) return;\r\n            setMessages(prev => ({\r\n                ...prev,\r\n                [msg.channel]: [...(prev[msg.channel] || []), msg]\r\n            }));\r\n        };\r\n        const handleLoadChannelMessages = (msgs) => {\r\n            if (channel && channel._id) {\r\n                setMessages(prev => ({\r\n                    ...prev,\r\n                    [channel._id]: msgs\r\n                }));\r\n            }\r\n        };\r\n        const handlePrivateMessage = (msg) => {\r\n            if (msg.to === storedUserId || msg.userId === storedUserId) {\r\n                if (channel && channel._id) {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [channel._id]: [...(prev[channel._id] || []), { ...msg, private: true }]\r\n                    }));\r\n                }\r\n            }\r\n        };\r\n        socket.on('newMessage', handleNewMessage);\r\n        socket.on('loadChannelMessages', handleLoadChannelMessages);\r\n        socket.on('privateMessage', handlePrivateMessage);\r\n        return () => {\r\n            socket.off('newMessage', handleNewMessage);\r\n            socket.off('loadChannelMessages', handleLoadChannelMessages);\r\n            socket.off('privateMessage', handlePrivateMessage);\r\n        };\r\n    }, [channel, storedUserId]);\r\n\r\n    // √Ä la connexion, envoie l'userId au serveur pour le mapping userId <-> socket.id\r\n    useEffect(() => {\r\n        if (storedUserId) {\r\n            socket.emit('registerUser', storedUserId);\r\n        }\r\n    }, [storedUserId]);\r\n\r\n    // S'abonner √† la room du channel s√©lectionn√© (clic)\r\n    useEffect(() => {\r\n        if (channel && channel._id && storedUserId) {\r\n            if (lastJoinedChannelRef.current !== channel._id) {\r\n                socket.emit('joinChannel', { userId: storedUserId, channelId: channel._id });\r\n                lastJoinedChannelRef.current = channel._id;\r\n            }\r\n        }\r\n    }, [channel?._id, storedUserId]);\r\n\r\n    // Scroll automatique\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }, [messages]);\r\n\r\n    // Gestion de l'envoi de message\r\n    const handleSendMessage = () => {\r\n        if (!storedUserId || !storedUsername) return;\r\n        if (message.trim() === '') return;\r\n        if (message.startsWith('/create ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez sp√©cifier un nom pour le canal.');\r\n            createChannel(channelName);\r\n            return;\r\n        }\r\n        if (message.startsWith('/join ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† rejoindre.');\r\n            fetch(`http://localhost:5000/api/channels?all=1`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    // Recherche stricte, insensible √† la casse\r\n                    const found = data.find(c => c.name.toLowerCase() === channelName.toLowerCase());\r\n                    if (!found) {\r\n                        setMessages((prev) => ({\r\n                            ...prev,\r\n                            [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: `Channel \"${channelName}\" introuvable.` }]\r\n                        }));\r\n                        return;\r\n                    }\r\n                    const channelId = found._id;\r\n                    fetch('http://localhost:5000/api/channels/join', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({ userId: storedUserId, channelId })\r\n                    }).then(() => {\r\n                        setMessages((prev) => ({\r\n                            ...prev,\r\n                            [channelId]: [...(prev[channelId] || []), { system: true, text: `Rejoint le channel \"${channelName}\".` }]\r\n                        }));\r\n                        if (fetchChannels) fetchChannels();\r\n                        socket.emit('joinChannel', { userId: storedUserId, channelId });\r\n                    });\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/quit ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† quitter.');\r\n            fetch(`http://localhost:5000/api/channels?all=1`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    // Recherche stricte, insensible √† la casse\r\n                    const found = data.find(c => c.name.toLowerCase() === channelName.toLowerCase());\r\n                    if (!found) {\r\n                        setMessages((prev) => ({\r\n                            ...prev,\r\n                            [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: `Channel \"${channelName}\" introuvable.` }]\r\n                        }));\r\n                        return;\r\n                    }\r\n                    const channelId = found._id;\r\n                    fetch('http://localhost:5000/api/channels/quit', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({ userId: storedUserId, channelId })\r\n                    }).then(() => {\r\n                        setMessages((prev) => ({\r\n                            ...prev,\r\n                            [channelId]: [...(prev[channelId] || []), { system: true, text: `Quitt√© le channel \"${channelName}\".` }]\r\n                        }));\r\n                        if (fetchChannels) fetchChannels();\r\n                        socket.emit('quitChannel', { userId: storedUserId, channelId });\r\n                    });\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/msg ')) {\r\n            const [_, toNickname, ...msgParts] = message.split(' ');\r\n            const msgText = msgParts.join(' ');\r\n            if (!toNickname || !msgText) return alert('Usage: /msg nickname message');\r\n            fetch(`http://localhost:5000/api/channels/${channel?._id}/users`)\r\n                .then(res => res.json())\r\n                .then(users => {\r\n                    if (!users.includes(toNickname)) {\r\n                        setMessages((prev) => ({\r\n                            ...prev,\r\n                            [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: `Utilisateur \"${toNickname}\" non trouv√© dans ce channel.` }]\r\n                        }));\r\n                        return;\r\n                    }\r\n                    // Envoie le message priv√© via socket\r\n                    socket.emit('sendPrivateMessage', {\r\n                        userId: storedUserId,\r\n                        username: storedUsername,\r\n                        toUsername: toNickname,\r\n                        text: msgText,\r\n                    });\r\n                    // Ne pas ajouter de setMessages ici pour √©viter les doublons\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/list')) {\r\n            const parts = message.split(' ');\r\n            const filter = parts[1] || '';\r\n            fetch(`http://localhost:5000/api/channels${filter ? `?name=${filter}` : ''}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages((prev) => ({\r\n                        ...prev,\r\n                        [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: `Channels disponibles : ${data.map(c => c.name).join(', ')}` }]\r\n                    }));\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/users')) {\r\n            if (!channel || !channel._id) return;\r\n            fetch(`http://localhost:5000/api/channels/${channel._id}/users`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages((prev) => ({\r\n                        ...prev,\r\n                        [channel._id]: [...(prev[channel._id] || []), { system: true, text: `Utilisateurs dans ce channel : ${data.join(', ')}` }]\r\n                    }));\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/delete ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† supprimer.');\r\n            const token = localStorage.getItem('token');\r\n            fetch(`http://localhost:5000/api/channels`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify({ name: channelName }),\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages((prev) => ({\r\n                        ...prev,\r\n                        [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: data.message || 'Canal supprim√©.' }]\r\n                    }));\r\n                    if (fetchChannels) fetchChannels();\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (!channel || !channel._id) {\r\n            setMessages((prev) => ({\r\n                ...prev,\r\n                [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: 'Veuillez cr√©er ou s√©lectionner un channel.' }]\r\n            }));\r\n            setMessage('');\r\n            return;\r\n        }\r\n        // Message normal au channel (optimistic update supprim√© pour √©viter le doublon)\r\n        socket.emit('sendMessage', {\r\n            userId: storedUserId,\r\n            username: storedUsername,\r\n            channelId: channel._id,\r\n            text: message.trim(),\r\n        });\r\n        setMessage('');\r\n    };\r\n\r\n    // Cr√©ation de channel\r\n    const createChannel = async (channelName) => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            const response = await fetch('http://localhost:5000/api/channels', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify({ name: channelName, creator: storedUsername }),\r\n            });\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setMessages((prev) => ({\r\n                    ...prev,\r\n                    [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: `Channel \"${channelName}\" cr√©√© !` }]\r\n                }));\r\n                setChannels((prev) => [...prev, data]);\r\n                if (fetchChannels) fetchChannels();\r\n            } else {\r\n                setMessages((prev) => ({\r\n                    ...prev,\r\n                    [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: data.message || 'Erreur lors de la cr√©ation du canal.' }]\r\n                }));\r\n            }\r\n        } catch (err) {\r\n            setMessages((prev) => ({\r\n                ...prev,\r\n                [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: 'Erreur lors de la cr√©ation du canal (r√©seau).' }]\r\n            }));\r\n        }\r\n        setMessage('');\r\n    };\r\n\r\n    // Gestion de la touche \"Entr√©e\"\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            handleSendMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-box\">\r\n            <div className=\"message-area\">\r\n                {currentMessages.map((msg, index) => (\r\n                    <div key={index} className={`message${msg.system ? ' system' : ''}${msg.private ? ' private' : ''}`}>\r\n                        <p className=\"message-meta\">\r\n                            {msg.system ? '[SYST√àME]' : msg.private ? '[PRIV√â]' : (msg.userId === storedUserId || msg.username === storedUsername ? 'Vous' : msg.username)} {msg.createdAt ? new Date(msg.createdAt).toLocaleString() : ''}\r\n                        </p>\r\n                        <p>{msg.text}</p>\r\n                    </div>\r\n                ))}\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n            <div className=\"input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    onKeyDown={handleKeyDown}\r\n                    placeholder=\"Tapez votre message, /create [nom] ou /msg [pseudo] [message]...\"\r\n                />\r\n                <button onClick={handleSendMessage}>Envoyer</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}