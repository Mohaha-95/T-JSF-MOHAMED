{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\momod\\\\T-JSF-600-PAR_2\\\\irc-client\\\\src\\\\Chatcomponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatcomponent.css';\nimport socket from './socket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatComponent = ({\n  username,\n  channel,\n  channels,\n  setChannels,\n  fetchChannels\n}) => {\n  _s();\n  const storedUserId = localStorage.getItem('userId');\n  const storedUsername = localStorage.getItem('username');\n  if (!storedUserId || !storedUsername) {\n    console.warn(\"⚠️ userId ou username manquant dans localStorage !\");\n    alert(\"Votre session a expiré. Veuillez vous reconnecter.\");\n    // Rediriger l'utilisateur vers la page de connexion si besoin\n    // window.location.href = \"/login\";\n  }\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState({}); // { [channelId]: [messages...] }\n  const messagesEndRef = useRef(null);\n  const lastJoinedChannelRef = useRef(null);\n\n  // Affiche les messages du channel courant\n  const currentMessages = channel && channel._id && messages[channel._id] ? messages[channel._id] : [];\n  console.log(\"🔎 Utilisateur :\", {\n    storedUsername,\n    storedUserId\n  });\n\n  // Charger l'historique du channel actif\n  useEffect(() => {\n    if (channel && channel._id) {\n      socket.emit('fetchChannelMessages', channel._id);\n    }\n  }, [channel]);\n\n  // Écoute des messages système pour tous les channels de l'utilisateur\n  useEffect(() => {\n    const handleSystemMessage = msg => {\n      if (!msg.channel) return;\n      // Log pour debug\n      console.log('[SYSTEM] Message reçu:', msg);\n      // Affiche le message si le channel courant correspond (comparaison en string)\n      if (channel && String(msg.channel) === String(channel._id)) {\n        let customText = msg.text;\n        if (msg.text && msg.text.includes('a rejoint le channel')) {\n          const user = msg.text.split(' ')[0];\n          customText = `${user} a rejoint le canal, souhaitez-lui la bienvenue !`;\n        }\n        if (msg.text && msg.text.includes('a quitté le channel')) {\n          const user = msg.text.split(' ')[0];\n          customText = `${user} a quitté le canal.`;\n        }\n\n        // Éviter les doublons en vérifiant si le message existe déjà\n        setMessages(prev => {\n          const currentMessages = prev[channel._id] || [];\n\n          // Vérifier si le message existe déjà par ID\n          const messageExists = currentMessages.some(existingMsg => existingMsg._id === msg._id);\n          if (messageExists) {\n            console.log('[SYSTEM] Message déjà présent, ignoré:', customText);\n            return prev;\n          }\n          console.log('[SYSTEM] Nouveau message système ajouté:', customText);\n          return {\n            ...prev,\n            [channel._id]: [...currentMessages, {\n              ...msg,\n              system: true,\n              text: customText\n            }]\n          };\n        });\n      }\n    };\n    socket.on('systemMessage', handleSystemMessage);\n    return () => {\n      socket.off('systemMessage', handleSystemMessage);\n    };\n  }, [channel]);\n\n  // Écoute des messages du channel, messages système et privés\n  useEffect(() => {\n    const handleNewMessage = msg => {\n      if (!msg.channel) return;\n      setMessages(prev => ({\n        ...prev,\n        [msg.channel]: [...(prev[msg.channel] || []), msg]\n      }));\n    };\n    const handleLoadChannelMessages = msgs => {\n      if (channel && channel._id) {\n        setMessages(prev => ({\n          ...prev,\n          [channel._id]: msgs\n        }));\n      }\n    };\n    const handlePrivateMessage = msg => {\n      if (msg.to === storedUserId || msg.userId === storedUserId) {\n        if (channel && channel._id) {\n          setMessages(prev => ({\n            ...prev,\n            [channel._id]: [...(prev[channel._id] || []), {\n              ...msg,\n              private: true,\n              // Ajouter des informations pour l'affichage\n              isFromMe: msg.userId === storedUserId,\n              otherUser: msg.userId === storedUserId ? msg.toUsername : msg.username\n            }]\n          }));\n        }\n      }\n    };\n    socket.on('newMessage', handleNewMessage);\n    socket.on('loadChannelMessages', handleLoadChannelMessages);\n    socket.on('privateMessage', handlePrivateMessage);\n    return () => {\n      socket.off('newMessage', handleNewMessage);\n      socket.off('loadChannelMessages', handleLoadChannelMessages);\n      socket.off('privateMessage', handlePrivateMessage);\n    };\n  }, [channel, storedUserId]);\n\n  // À la connexion, envoie l'userId au serveur pour le mapping userId <-> socket.id\n  useEffect(() => {\n    if (storedUserId) {\n      socket.emit('registerUser', storedUserId);\n    }\n  }, [storedUserId]);\n\n  // S'abonner à la room du channel sélectionné (clic)\n  useEffect(() => {\n    if (channel && channel._id && storedUserId) {\n      if (lastJoinedChannelRef.current !== channel._id) {\n        socket.emit('joinChannel', {\n          userId: storedUserId,\n          channelId: channel._id\n        });\n        lastJoinedChannelRef.current = channel._id;\n      }\n    }\n  }, [channel === null || channel === void 0 ? void 0 : channel._id, storedUserId]);\n\n  // Scroll automatique\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Gestion de l'envoi de message\n  const handleSendMessage = () => {\n    if (!storedUserId || !storedUsername) return;\n    if (message.trim() === '') return;\n    if (message.startsWith('/create ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez spécifier un nom pour le canal.');\n      createChannel(channelName);\n      return;\n    }\n    if (message.startsWith('/join ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez spécifier un nom de canal à rejoindre.');\n      fetch(`http://localhost:5000/api/channels?all=1`).then(res => res.json()).then(data => {\n        // Recherche stricte, insensible à la casse\n        const found = data.find(c => c.name.toLowerCase() === channelName.toLowerCase());\n        if (!found) {\n          setMessages(prev => ({\n            ...prev,\n            [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n              system: true,\n              text: `Channel \"${channelName}\" introuvable.`\n            }]\n          }));\n          return;\n        }\n        const channelId = found._id;\n        fetch('http://localhost:5000/api/channels/join', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId: storedUserId,\n            channelId\n          })\n        }).then(() => {\n          setMessages(prev => ({\n            ...prev,\n            [channelId]: [...(prev[channelId] || []), {\n              system: true,\n              text: `Rejoint le channel \"${channelName}\".`\n            }]\n          }));\n          if (fetchChannels) fetchChannels();\n          socket.emit('joinChannel', {\n            userId: storedUserId,\n            channelId\n          });\n        });\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/quit ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez spécifier un nom de canal à quitter.');\n      fetch(`http://localhost:5000/api/channels?all=1`).then(res => res.json()).then(data => {\n        // Recherche stricte, insensible à la casse\n        const found = data.find(c => c.name.toLowerCase() === channelName.toLowerCase());\n        if (!found) {\n          setMessages(prev => ({\n            ...prev,\n            [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n              system: true,\n              text: `Channel \"${channelName}\" introuvable.`\n            }]\n          }));\n          return;\n        }\n        const channelId = found._id;\n        fetch('http://localhost:5000/api/channels/quit', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId: storedUserId,\n            channelId\n          })\n        }).then(() => {\n          setMessages(prev => ({\n            ...prev,\n            [channelId]: [...(prev[channelId] || []), {\n              system: true,\n              text: `Quitté le channel \"${channelName}\".`\n            }]\n          }));\n          if (fetchChannels) fetchChannels();\n          socket.emit('quitChannel', {\n            userId: storedUserId,\n            channelId\n          });\n        });\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/msg ')) {\n      const [_, toNickname, ...msgParts] = message.split(' ');\n      const msgText = msgParts.join(' ');\n      if (!toNickname || !msgText) return alert('Usage: /msg nickname message');\n      fetch(`http://localhost:5000/api/channels/${channel === null || channel === void 0 ? void 0 : channel._id}/users`).then(res => res.json()).then(users => {\n        if (!users.includes(toNickname)) {\n          setMessages(prev => ({\n            ...prev,\n            [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n              system: true,\n              text: `Utilisateur \"${toNickname}\" non trouvé dans ce channel.`\n            }]\n          }));\n          return;\n        }\n        // Envoie le message privé via socket\n        socket.emit('sendPrivateMessage', {\n          userId: storedUserId,\n          username: storedUsername,\n          toUsername: toNickname,\n          text: msgText\n        });\n        // Ne pas ajouter de setMessages ici pour éviter les doublons\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/list')) {\n      const parts = message.split(' ');\n      const filter = parts[1] || '';\n      fetch(`http://localhost:5000/api/channels${filter ? `?name=${filter}` : ''}`).then(res => res.json()).then(data => {\n        setMessages(prev => ({\n          ...prev,\n          [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n            system: true,\n            text: `Channels disponibles : ${data.map(c => c.name).join(', ')}`\n          }]\n        }));\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/users')) {\n      if (!channel || !channel._id) return;\n      fetch(`http://localhost:5000/api/channels/${channel._id}/users`).then(res => res.json()).then(data => {\n        setMessages(prev => ({\n          ...prev,\n          [channel._id]: [...(prev[channel._id] || []), {\n            system: true,\n            text: `Utilisateurs dans ce channel : ${data.join(', ')}`\n          }]\n        }));\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/delete ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez spécifier un nom de canal à supprimer.');\n      const token = localStorage.getItem('token');\n      fetch(`http://localhost:5000/api/channels`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: channelName\n        })\n      }).then(res => res.json()).then(data => {\n        setMessages(prev => ({\n          ...prev,\n          [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n            system: true,\n            text: data.message || 'Canal supprimé.'\n          }]\n        }));\n        if (fetchChannels) fetchChannels();\n      });\n      setMessage('');\n      return;\n    }\n    // Pour les commandes qui ne nécessitent pas de canal sélectionné, on utilise un canal temporaire\n    const tempChannelId = 'temp';\n    if (!channel || !channel._id) {\n      // Permettre les commandes même sans canal sélectionné\n      if (message.startsWith('/create') || message.startsWith('/list') || message.startsWith('/msg')) {\n        // Ces commandes peuvent être exécutées sans canal\n      } else {\n        setMessages(prev => ({\n          ...prev,\n          [tempChannelId]: [...(prev[tempChannelId] || []), {\n            system: true,\n            text: 'Veuillez créer ou sélectionner un channel pour envoyer des messages.'\n          }]\n        }));\n        setMessage('');\n        return;\n      }\n    }\n    // Message normal au channel (optimistic update supprimé pour éviter le doublon)\n    socket.emit('sendMessage', {\n      userId: storedUserId,\n      username: storedUsername,\n      channelId: channel._id,\n      text: message.trim()\n    });\n    setMessage('');\n  };\n\n  // Création de channel\n  const createChannel = async channelName => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/api/channels', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: channelName,\n          creator: storedUsername\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessages(prev => ({\n          ...prev,\n          [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n            system: true,\n            text: `Channel \"${channelName}\" créé !`\n          }]\n        }));\n        setChannels(prev => [...prev, data]);\n        if (fetchChannels) fetchChannels();\n      } else {\n        setMessages(prev => ({\n          ...prev,\n          [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n            system: true,\n            text: data.message || 'Erreur lors de la création du canal.'\n          }]\n        }));\n      }\n    } catch (err) {\n      setMessages(prev => ({\n        ...prev,\n        [channel === null || channel === void 0 ? void 0 : channel._id]: [...(prev[channel === null || channel === void 0 ? void 0 : channel._id] || []), {\n          system: true,\n          text: 'Erreur lors de la création du canal (réseau).'\n        }]\n      }));\n    }\n    setMessage('');\n  };\n\n  // Gestion de la touche \"Entrée\"\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [channel && channel.name ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-header\",\n        children: channel.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-area\",\n        children: [currentMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message${msg.system ? ' system' : ''}${msg.private ? ' private' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message-meta\",\n            children: [msg.system ? '[SYSTÈME]' : msg.private ? msg.isFromMe ? `[PRIVÉ → ${msg.otherUser}]` : `[PRIVÉ ← ${msg.otherUser}]` : msg.userId === storedUserId || msg.username === storedUsername ? 'Vous' : msg.username, \" \", msg.createdAt ? new Date(msg.createdAt).toLocaleString() : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-channel-message\",\n      children: \"S\\xE9lectionnez un canal pour commencer \\xE0 discuter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        onKeyDown: handleKeyDown,\n        placeholder: channel && channel.name ? \"Tapez votre message, /create [nom] ou /msg [pseudo] [message]...\" : \"Tapez /create [nom] pour créer un canal ou /list pour voir les canaux disponibles...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatComponent, \"kuHk9PpOtBlZKP+tRSm3CLw1yE0=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","socket","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatComponent","username","channel","channels","setChannels","fetchChannels","_s","storedUserId","localStorage","getItem","storedUsername","console","warn","alert","message","setMessage","messages","setMessages","messagesEndRef","lastJoinedChannelRef","currentMessages","_id","log","emit","handleSystemMessage","msg","String","customText","text","includes","user","split","prev","messageExists","some","existingMsg","system","on","off","handleNewMessage","handleLoadChannelMessages","msgs","handlePrivateMessage","to","userId","private","isFromMe","otherUser","toUsername","current","channelId","_messagesEndRef$curre","scrollIntoView","behavior","handleSendMessage","trim","startsWith","channelName","createChannel","fetch","then","res","json","data","found","find","c","name","toLowerCase","method","headers","body","JSON","stringify","_","toNickname","msgParts","msgText","join","users","parts","filter","map","token","tempChannelId","response","creator","ok","err","handleKeyDown","e","key","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","createdAt","Date","toLocaleString","ref","type","value","onChange","target","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/momod/T-JSF-600-PAR_2/irc-client/src/Chatcomponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chatcomponent.css';\r\nimport socket from './socket';\r\n\r\nconst ChatComponent = ({ username, channel, channels, setChannels, fetchChannels }) => {\r\n    const storedUserId = localStorage.getItem('userId');\r\n    const storedUsername = localStorage.getItem('username');\r\n\r\n    if (!storedUserId || !storedUsername) {\r\n        console.warn(\"⚠️ userId ou username manquant dans localStorage !\");\r\n        alert(\"Votre session a expiré. Veuillez vous reconnecter.\");\r\n        // Rediriger l'utilisateur vers la page de connexion si besoin\r\n        // window.location.href = \"/login\";\r\n    }\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState({}); // { [channelId]: [messages...] }\r\n    const messagesEndRef = useRef(null);\r\n    const lastJoinedChannelRef = useRef(null);\r\n\r\n    // Affiche les messages du channel courant\r\n    const currentMessages = channel && channel._id && messages[channel._id] ? messages[channel._id] : [];\r\n\r\n    console.log(\"🔎 Utilisateur :\", { storedUsername, storedUserId });\r\n\r\n    // Charger l'historique du channel actif\r\n    useEffect(() => {\r\n        if (channel && channel._id) {\r\n            socket.emit('fetchChannelMessages', channel._id);\r\n        }\r\n    }, [channel]);\r\n\r\n    // Écoute des messages système pour tous les channels de l'utilisateur\r\n    useEffect(() => {\r\n        const handleSystemMessage = (msg) => {\r\n            if (!msg.channel) return;\r\n            // Log pour debug\r\n            console.log('[SYSTEM] Message reçu:', msg);\r\n            // Affiche le message si le channel courant correspond (comparaison en string)\r\n            if (channel && String(msg.channel) === String(channel._id)) {\r\n                let customText = msg.text;\r\n                if (msg.text && msg.text.includes('a rejoint le channel')) {\r\n                    const user = msg.text.split(' ')[0];\r\n                    customText = `${user} a rejoint le canal, souhaitez-lui la bienvenue !`;\r\n                }\r\n                if (msg.text && msg.text.includes('a quitté le channel')) {\r\n                    const user = msg.text.split(' ')[0];\r\n                    customText = `${user} a quitté le canal.`;\r\n                }\r\n                \r\n                // Éviter les doublons en vérifiant si le message existe déjà\r\n                setMessages(prev => {\r\n                    const currentMessages = prev[channel._id] || [];\r\n                    \r\n                    // Vérifier si le message existe déjà par ID\r\n                    const messageExists = currentMessages.some(existingMsg => \r\n                        existingMsg._id === msg._id\r\n                    );\r\n                    \r\n                    if (messageExists) {\r\n                        console.log('[SYSTEM] Message déjà présent, ignoré:', customText);\r\n                        return prev;\r\n                    }\r\n                    \r\n                    console.log('[SYSTEM] Nouveau message système ajouté:', customText);\r\n                    return {\r\n                        ...prev,\r\n                        [channel._id]: [...currentMessages, { \r\n                            ...msg, \r\n                            system: true, \r\n                            text: customText\r\n                        }]\r\n                    };\r\n                });\r\n            }\r\n        };\r\n        socket.on('systemMessage', handleSystemMessage);\r\n        return () => {\r\n            socket.off('systemMessage', handleSystemMessage);\r\n        };\r\n    }, [channel]);\r\n\r\n    // Écoute des messages du channel, messages système et privés\r\n    useEffect(() => {\r\n        const handleNewMessage = (msg) => {\r\n            if (!msg.channel) return;\r\n            setMessages(prev => ({\r\n                ...prev,\r\n                [msg.channel]: [...(prev[msg.channel] || []), msg]\r\n            }));\r\n        };\r\n        const handleLoadChannelMessages = (msgs) => {\r\n            if (channel && channel._id) {\r\n                setMessages(prev => ({\r\n                    ...prev,\r\n                    [channel._id]: msgs\r\n                }));\r\n            }\r\n        };\r\n        const handlePrivateMessage = (msg) => {\r\n            if (msg.to === storedUserId || msg.userId === storedUserId) {\r\n                if (channel && channel._id) {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [channel._id]: [...(prev[channel._id] || []), { \r\n                            ...msg, \r\n                            private: true,\r\n                            // Ajouter des informations pour l'affichage\r\n                            isFromMe: msg.userId === storedUserId,\r\n                            otherUser: msg.userId === storedUserId ? msg.toUsername : msg.username\r\n                        }]\r\n                    }));\r\n                }\r\n            }\r\n        };\r\n        socket.on('newMessage', handleNewMessage);\r\n        socket.on('loadChannelMessages', handleLoadChannelMessages);\r\n        socket.on('privateMessage', handlePrivateMessage);\r\n        return () => {\r\n            socket.off('newMessage', handleNewMessage);\r\n            socket.off('loadChannelMessages', handleLoadChannelMessages);\r\n            socket.off('privateMessage', handlePrivateMessage);\r\n        };\r\n    }, [channel, storedUserId]);\r\n\r\n    // À la connexion, envoie l'userId au serveur pour le mapping userId <-> socket.id\r\n    useEffect(() => {\r\n        if (storedUserId) {\r\n            socket.emit('registerUser', storedUserId);\r\n        }\r\n    }, [storedUserId]);\r\n\r\n    // S'abonner à la room du channel sélectionné (clic)\r\n    useEffect(() => {\r\n        if (channel && channel._id && storedUserId) {\r\n            if (lastJoinedChannelRef.current !== channel._id) {\r\n                socket.emit('joinChannel', { userId: storedUserId, channelId: channel._id });\r\n                lastJoinedChannelRef.current = channel._id;\r\n            }\r\n        }\r\n    }, [channel?._id, storedUserId]);\r\n\r\n    // Scroll automatique\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }, [messages]);\r\n\r\n    // Gestion de l'envoi de message\r\n    const handleSendMessage = () => {\r\n        if (!storedUserId || !storedUsername) return;\r\n        if (message.trim() === '') return;\r\n        if (message.startsWith('/create ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez spécifier un nom pour le canal.');\r\n            createChannel(channelName);\r\n            return;\r\n        }\r\n        if (message.startsWith('/join ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez spécifier un nom de canal à rejoindre.');\r\n            fetch(`http://localhost:5000/api/channels?all=1`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    // Recherche stricte, insensible à la casse\r\n                    const found = data.find(c => c.name.toLowerCase() === channelName.toLowerCase());\r\n                    if (!found) {\r\n                        setMessages((prev) => ({\r\n                            ...prev,\r\n                            [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: `Channel \"${channelName}\" introuvable.` }]\r\n                        }));\r\n                        return;\r\n                    }\r\n                    const channelId = found._id;\r\n                    fetch('http://localhost:5000/api/channels/join', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({ userId: storedUserId, channelId })\r\n                    }).then(() => {\r\n                        setMessages((prev) => ({\r\n                            ...prev,\r\n                            [channelId]: [...(prev[channelId] || []), { system: true, text: `Rejoint le channel \"${channelName}\".` }]\r\n                        }));\r\n                        if (fetchChannels) fetchChannels();\r\n                        socket.emit('joinChannel', { userId: storedUserId, channelId });\r\n                    });\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/quit ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez spécifier un nom de canal à quitter.');\r\n            fetch(`http://localhost:5000/api/channels?all=1`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    // Recherche stricte, insensible à la casse\r\n                    const found = data.find(c => c.name.toLowerCase() === channelName.toLowerCase());\r\n                    if (!found) {\r\n                        setMessages((prev) => ({\r\n                            ...prev,\r\n                            [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: `Channel \"${channelName}\" introuvable.` }]\r\n                        }));\r\n                        return;\r\n                    }\r\n                    const channelId = found._id;\r\n                    fetch('http://localhost:5000/api/channels/quit', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({ userId: storedUserId, channelId })\r\n                    }).then(() => {\r\n                        setMessages((prev) => ({\r\n                            ...prev,\r\n                            [channelId]: [...(prev[channelId] || []), { system: true, text: `Quitté le channel \"${channelName}\".` }]\r\n                        }));\r\n                        if (fetchChannels) fetchChannels();\r\n                        socket.emit('quitChannel', { userId: storedUserId, channelId });\r\n                    });\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/msg ')) {\r\n            const [_, toNickname, ...msgParts] = message.split(' ');\r\n            const msgText = msgParts.join(' ');\r\n            if (!toNickname || !msgText) return alert('Usage: /msg nickname message');\r\n            fetch(`http://localhost:5000/api/channels/${channel?._id}/users`)\r\n                .then(res => res.json())\r\n                .then(users => {\r\n                    if (!users.includes(toNickname)) {\r\n                        setMessages((prev) => ({\r\n                            ...prev,\r\n                            [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: `Utilisateur \"${toNickname}\" non trouvé dans ce channel.` }]\r\n                        }));\r\n                        return;\r\n                    }\r\n                    // Envoie le message privé via socket\r\n                    socket.emit('sendPrivateMessage', {\r\n                        userId: storedUserId,\r\n                        username: storedUsername,\r\n                        toUsername: toNickname,\r\n                        text: msgText,\r\n                    });\r\n                    // Ne pas ajouter de setMessages ici pour éviter les doublons\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/list')) {\r\n            const parts = message.split(' ');\r\n            const filter = parts[1] || '';\r\n            fetch(`http://localhost:5000/api/channels${filter ? `?name=${filter}` : ''}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages((prev) => ({\r\n                        ...prev,\r\n                        [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: `Channels disponibles : ${data.map(c => c.name).join(', ')}` }]\r\n                    }));\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/users')) {\r\n            if (!channel || !channel._id) return;\r\n            fetch(`http://localhost:5000/api/channels/${channel._id}/users`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages((prev) => ({\r\n                        ...prev,\r\n                        [channel._id]: [...(prev[channel._id] || []), { system: true, text: `Utilisateurs dans ce channel : ${data.join(', ')}` }]\r\n                    }));\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/delete ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez spécifier un nom de canal à supprimer.');\r\n            const token = localStorage.getItem('token');\r\n            fetch(`http://localhost:5000/api/channels`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify({ name: channelName }),\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages((prev) => ({\r\n                        ...prev,\r\n                        [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: data.message || 'Canal supprimé.' }]\r\n                    }));\r\n                    if (fetchChannels) fetchChannels();\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        // Pour les commandes qui ne nécessitent pas de canal sélectionné, on utilise un canal temporaire\r\n        const tempChannelId = 'temp';\r\n        \r\n        if (!channel || !channel._id) {\r\n            // Permettre les commandes même sans canal sélectionné\r\n            if (message.startsWith('/create') || message.startsWith('/list') || message.startsWith('/msg')) {\r\n                // Ces commandes peuvent être exécutées sans canal\r\n            } else {\r\n                setMessages((prev) => ({\r\n                    ...prev,\r\n                    [tempChannelId]: [...(prev[tempChannelId] || []), { system: true, text: 'Veuillez créer ou sélectionner un channel pour envoyer des messages.' }]\r\n                }));\r\n                setMessage('');\r\n                return;\r\n            }\r\n        }\r\n        // Message normal au channel (optimistic update supprimé pour éviter le doublon)\r\n        socket.emit('sendMessage', {\r\n            userId: storedUserId,\r\n            username: storedUsername,\r\n            channelId: channel._id,\r\n            text: message.trim(),\r\n        });\r\n        setMessage('');\r\n    };\r\n\r\n    // Création de channel\r\n    const createChannel = async (channelName) => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            const response = await fetch('http://localhost:5000/api/channels', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify({ name: channelName, creator: storedUsername }),\r\n            });\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setMessages((prev) => ({\r\n                    ...prev,\r\n                    [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: `Channel \"${channelName}\" créé !` }]\r\n                }));\r\n                setChannels((prev) => [...prev, data]);\r\n                if (fetchChannels) fetchChannels();\r\n            } else {\r\n                setMessages((prev) => ({\r\n                    ...prev,\r\n                    [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: data.message || 'Erreur lors de la création du canal.' }]\r\n                }));\r\n            }\r\n        } catch (err) {\r\n            setMessages((prev) => ({\r\n                ...prev,\r\n                [channel?._id]: [...(prev[channel?._id] || []), { system: true, text: 'Erreur lors de la création du canal (réseau).' }]\r\n            }));\r\n        }\r\n        setMessage('');\r\n    };\r\n\r\n    // Gestion de la touche \"Entrée\"\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            handleSendMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-box\">\r\n            {channel && channel.name ? (\r\n                <>\r\n                    <div className=\"channel-header\">\r\n                        {channel.name}\r\n                    </div>\r\n                    <div className=\"message-area\">\r\n                        {currentMessages.map((msg, index) => (\r\n                            <div key={index} className={`message${msg.system ? ' system' : ''}${msg.private ? ' private' : ''}`}>\r\n                                <p className=\"message-meta\">\r\n                                    {msg.system ? '[SYSTÈME]' : msg.private ? \r\n                                        (msg.isFromMe ? \r\n                                            `[PRIVÉ → ${msg.otherUser}]` : \r\n                                            `[PRIVÉ ← ${msg.otherUser}]`) : \r\n                                        (msg.userId === storedUserId || msg.username === storedUsername ? 'Vous' : msg.username)\r\n                                    } {msg.createdAt ? new Date(msg.createdAt).toLocaleString() : ''}\r\n                                </p>\r\n                                <p>{msg.text}</p>\r\n                            </div>\r\n                        ))}\r\n                        <div ref={messagesEndRef} />\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <div className=\"no-channel-message\">\r\n                    Sélectionnez un canal pour commencer à discuter\r\n                </div>\r\n            )}\r\n            <div className=\"input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    onKeyDown={handleKeyDown}\r\n                    placeholder={channel && channel.name ? \r\n                        \"Tapez votre message, /create [nom] ou /msg [pseudo] [message]...\" : \r\n                        \"Tapez /create [nom] pour créer un canal ou /list pour voir les canaux disponibles...\"\r\n                    }\r\n                />\r\n                <button onClick={handleSendMessage}>Envoyer</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,qBAAqB;AAC5B,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9B,MAAMC,aAAa,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,OAAO;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EACnD,MAAMC,cAAc,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAEvD,IAAI,CAACF,YAAY,IAAI,CAACG,cAAc,EAAE;IAClCC,OAAO,CAACC,IAAI,CAAC,oDAAoD,CAAC;IAClEC,KAAK,CAAC,oDAAoD,CAAC;IAC3D;IACA;EACJ;EAEA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM0B,cAAc,GAAGxB,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMyB,oBAAoB,GAAGzB,MAAM,CAAC,IAAI,CAAC;;EAEzC;EACA,MAAM0B,eAAe,GAAGlB,OAAO,IAAIA,OAAO,CAACmB,GAAG,IAAIL,QAAQ,CAACd,OAAO,CAACmB,GAAG,CAAC,GAAGL,QAAQ,CAACd,OAAO,CAACmB,GAAG,CAAC,GAAG,EAAE;EAEpGV,OAAO,CAACW,GAAG,CAAC,kBAAkB,EAAE;IAAEZ,cAAc;IAAEH;EAAa,CAAC,CAAC;;EAEjE;EACAd,SAAS,CAAC,MAAM;IACZ,IAAIS,OAAO,IAAIA,OAAO,CAACmB,GAAG,EAAE;MACxB1B,MAAM,CAAC4B,IAAI,CAAC,sBAAsB,EAAErB,OAAO,CAACmB,GAAG,CAAC;IACpD;EACJ,CAAC,EAAE,CAACnB,OAAO,CAAC,CAAC;;EAEb;EACAT,SAAS,CAAC,MAAM;IACZ,MAAM+B,mBAAmB,GAAIC,GAAG,IAAK;MACjC,IAAI,CAACA,GAAG,CAACvB,OAAO,EAAE;MAClB;MACAS,OAAO,CAACW,GAAG,CAAC,wBAAwB,EAAEG,GAAG,CAAC;MAC1C;MACA,IAAIvB,OAAO,IAAIwB,MAAM,CAACD,GAAG,CAACvB,OAAO,CAAC,KAAKwB,MAAM,CAACxB,OAAO,CAACmB,GAAG,CAAC,EAAE;QACxD,IAAIM,UAAU,GAAGF,GAAG,CAACG,IAAI;QACzB,IAAIH,GAAG,CAACG,IAAI,IAAIH,GAAG,CAACG,IAAI,CAACC,QAAQ,CAAC,sBAAsB,CAAC,EAAE;UACvD,MAAMC,IAAI,GAAGL,GAAG,CAACG,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACnCJ,UAAU,GAAG,GAAGG,IAAI,mDAAmD;QAC3E;QACA,IAAIL,GAAG,CAACG,IAAI,IAAIH,GAAG,CAACG,IAAI,CAACC,QAAQ,CAAC,qBAAqB,CAAC,EAAE;UACtD,MAAMC,IAAI,GAAGL,GAAG,CAACG,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACnCJ,UAAU,GAAG,GAAGG,IAAI,qBAAqB;QAC7C;;QAEA;QACAb,WAAW,CAACe,IAAI,IAAI;UAChB,MAAMZ,eAAe,GAAGY,IAAI,CAAC9B,OAAO,CAACmB,GAAG,CAAC,IAAI,EAAE;;UAE/C;UACA,MAAMY,aAAa,GAAGb,eAAe,CAACc,IAAI,CAACC,WAAW,IAClDA,WAAW,CAACd,GAAG,KAAKI,GAAG,CAACJ,GAC5B,CAAC;UAED,IAAIY,aAAa,EAAE;YACftB,OAAO,CAACW,GAAG,CAAC,wCAAwC,EAAEK,UAAU,CAAC;YACjE,OAAOK,IAAI;UACf;UAEArB,OAAO,CAACW,GAAG,CAAC,0CAA0C,EAAEK,UAAU,CAAC;UACnE,OAAO;YACH,GAAGK,IAAI;YACP,CAAC9B,OAAO,CAACmB,GAAG,GAAG,CAAC,GAAGD,eAAe,EAAE;cAChC,GAAGK,GAAG;cACNW,MAAM,EAAE,IAAI;cACZR,IAAI,EAAED;YACV,CAAC;UACL,CAAC;QACL,CAAC,CAAC;MACN;IACJ,CAAC;IACDhC,MAAM,CAAC0C,EAAE,CAAC,eAAe,EAAEb,mBAAmB,CAAC;IAC/C,OAAO,MAAM;MACT7B,MAAM,CAAC2C,GAAG,CAAC,eAAe,EAAEd,mBAAmB,CAAC;IACpD,CAAC;EACL,CAAC,EAAE,CAACtB,OAAO,CAAC,CAAC;;EAEb;EACAT,SAAS,CAAC,MAAM;IACZ,MAAM8C,gBAAgB,GAAId,GAAG,IAAK;MAC9B,IAAI,CAACA,GAAG,CAACvB,OAAO,EAAE;MAClBe,WAAW,CAACe,IAAI,KAAK;QACjB,GAAGA,IAAI;QACP,CAACP,GAAG,CAACvB,OAAO,GAAG,CAAC,IAAI8B,IAAI,CAACP,GAAG,CAACvB,OAAO,CAAC,IAAI,EAAE,CAAC,EAAEuB,GAAG;MACrD,CAAC,CAAC,CAAC;IACP,CAAC;IACD,MAAMe,yBAAyB,GAAIC,IAAI,IAAK;MACxC,IAAIvC,OAAO,IAAIA,OAAO,CAACmB,GAAG,EAAE;QACxBJ,WAAW,CAACe,IAAI,KAAK;UACjB,GAAGA,IAAI;UACP,CAAC9B,OAAO,CAACmB,GAAG,GAAGoB;QACnB,CAAC,CAAC,CAAC;MACP;IACJ,CAAC;IACD,MAAMC,oBAAoB,GAAIjB,GAAG,IAAK;MAClC,IAAIA,GAAG,CAACkB,EAAE,KAAKpC,YAAY,IAAIkB,GAAG,CAACmB,MAAM,KAAKrC,YAAY,EAAE;QACxD,IAAIL,OAAO,IAAIA,OAAO,CAACmB,GAAG,EAAE;UACxBJ,WAAW,CAACe,IAAI,KAAK;YACjB,GAAGA,IAAI;YACP,CAAC9B,OAAO,CAACmB,GAAG,GAAG,CAAC,IAAIW,IAAI,CAAC9B,OAAO,CAACmB,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;cAC1C,GAAGI,GAAG;cACNoB,OAAO,EAAE,IAAI;cACb;cACAC,QAAQ,EAAErB,GAAG,CAACmB,MAAM,KAAKrC,YAAY;cACrCwC,SAAS,EAAEtB,GAAG,CAACmB,MAAM,KAAKrC,YAAY,GAAGkB,GAAG,CAACuB,UAAU,GAAGvB,GAAG,CAACxB;YAClE,CAAC;UACL,CAAC,CAAC,CAAC;QACP;MACJ;IACJ,CAAC;IACDN,MAAM,CAAC0C,EAAE,CAAC,YAAY,EAAEE,gBAAgB,CAAC;IACzC5C,MAAM,CAAC0C,EAAE,CAAC,qBAAqB,EAAEG,yBAAyB,CAAC;IAC3D7C,MAAM,CAAC0C,EAAE,CAAC,gBAAgB,EAAEK,oBAAoB,CAAC;IACjD,OAAO,MAAM;MACT/C,MAAM,CAAC2C,GAAG,CAAC,YAAY,EAAEC,gBAAgB,CAAC;MAC1C5C,MAAM,CAAC2C,GAAG,CAAC,qBAAqB,EAAEE,yBAAyB,CAAC;MAC5D7C,MAAM,CAAC2C,GAAG,CAAC,gBAAgB,EAAEI,oBAAoB,CAAC;IACtD,CAAC;EACL,CAAC,EAAE,CAACxC,OAAO,EAAEK,YAAY,CAAC,CAAC;;EAE3B;EACAd,SAAS,CAAC,MAAM;IACZ,IAAIc,YAAY,EAAE;MACdZ,MAAM,CAAC4B,IAAI,CAAC,cAAc,EAAEhB,YAAY,CAAC;IAC7C;EACJ,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;;EAElB;EACAd,SAAS,CAAC,MAAM;IACZ,IAAIS,OAAO,IAAIA,OAAO,CAACmB,GAAG,IAAId,YAAY,EAAE;MACxC,IAAIY,oBAAoB,CAAC8B,OAAO,KAAK/C,OAAO,CAACmB,GAAG,EAAE;QAC9C1B,MAAM,CAAC4B,IAAI,CAAC,aAAa,EAAE;UAAEqB,MAAM,EAAErC,YAAY;UAAE2C,SAAS,EAAEhD,OAAO,CAACmB;QAAI,CAAC,CAAC;QAC5EF,oBAAoB,CAAC8B,OAAO,GAAG/C,OAAO,CAACmB,GAAG;MAC9C;IACJ;EACJ,CAAC,EAAE,CAACnB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,EAAEd,YAAY,CAAC,CAAC;;EAEhC;EACAd,SAAS,CAAC,MAAM;IAAA,IAAA0D,qBAAA;IACZ,CAAAA,qBAAA,GAAAjC,cAAc,CAAC+B,OAAO,cAAAE,qBAAA,uBAAtBA,qBAAA,CAAwBC,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAClE,CAAC,EAAE,CAACrC,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMsC,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAAC/C,YAAY,IAAI,CAACG,cAAc,EAAE;IACtC,IAAII,OAAO,CAACyC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC3B,IAAIzC,OAAO,CAAC0C,UAAU,CAAC,UAAU,CAAC,EAAE;MAChC,MAAMC,WAAW,GAAG3C,OAAO,CAACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACzC,IAAI,CAAC0B,WAAW,EAAE,OAAO5C,KAAK,CAAC,0CAA0C,CAAC;MAC1E6C,aAAa,CAACD,WAAW,CAAC;MAC1B;IACJ;IACA,IAAI3C,OAAO,CAAC0C,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC9B,MAAMC,WAAW,GAAG3C,OAAO,CAACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACzC,IAAI,CAAC0B,WAAW,EAAE,OAAO5C,KAAK,CAAC,iDAAiD,CAAC;MACjF8C,KAAK,CAAC,0CAA0C,CAAC,CAC5CC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;QACV;QACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKX,WAAW,CAACW,WAAW,CAAC,CAAC,CAAC;QAChF,IAAI,CAACJ,KAAK,EAAE;UACR/C,WAAW,CAAEe,IAAI,KAAM;YACnB,GAAGA,IAAI;YACP,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,GAAG,CAAC,IAAIW,IAAI,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;cAAEe,MAAM,EAAE,IAAI;cAAER,IAAI,EAAE,YAAY6B,WAAW;YAAiB,CAAC;UACnH,CAAC,CAAC,CAAC;UACH;QACJ;QACA,MAAMP,SAAS,GAAGc,KAAK,CAAC3C,GAAG;QAC3BsC,KAAK,CAAC,yCAAyC,EAAE;UAC7CU,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAE7B,MAAM,EAAErC,YAAY;YAAE2C;UAAU,CAAC;QAC5D,CAAC,CAAC,CAACU,IAAI,CAAC,MAAM;UACV3C,WAAW,CAAEe,IAAI,KAAM;YACnB,GAAGA,IAAI;YACP,CAACkB,SAAS,GAAG,CAAC,IAAIlB,IAAI,CAACkB,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE;cAAEd,MAAM,EAAE,IAAI;cAAER,IAAI,EAAE,uBAAuB6B,WAAW;YAAK,CAAC;UAC5G,CAAC,CAAC,CAAC;UACH,IAAIpD,aAAa,EAAEA,aAAa,CAAC,CAAC;UAClCV,MAAM,CAAC4B,IAAI,CAAC,aAAa,EAAE;YAAEqB,MAAM,EAAErC,YAAY;YAAE2C;UAAU,CAAC,CAAC;QACnE,CAAC,CAAC;MACN,CAAC,CAAC;MACNnC,UAAU,CAAC,EAAE,CAAC;MACd;IACJ;IACA,IAAID,OAAO,CAAC0C,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC9B,MAAMC,WAAW,GAAG3C,OAAO,CAACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACzC,IAAI,CAAC0B,WAAW,EAAE,OAAO5C,KAAK,CAAC,+CAA+C,CAAC;MAC/E8C,KAAK,CAAC,0CAA0C,CAAC,CAC5CC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;QACV;QACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKX,WAAW,CAACW,WAAW,CAAC,CAAC,CAAC;QAChF,IAAI,CAACJ,KAAK,EAAE;UACR/C,WAAW,CAAEe,IAAI,KAAM;YACnB,GAAGA,IAAI;YACP,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,GAAG,CAAC,IAAIW,IAAI,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;cAAEe,MAAM,EAAE,IAAI;cAAER,IAAI,EAAE,YAAY6B,WAAW;YAAiB,CAAC;UACnH,CAAC,CAAC,CAAC;UACH;QACJ;QACA,MAAMP,SAAS,GAAGc,KAAK,CAAC3C,GAAG;QAC3BsC,KAAK,CAAC,yCAAyC,EAAE;UAC7CU,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAE7B,MAAM,EAAErC,YAAY;YAAE2C;UAAU,CAAC;QAC5D,CAAC,CAAC,CAACU,IAAI,CAAC,MAAM;UACV3C,WAAW,CAAEe,IAAI,KAAM;YACnB,GAAGA,IAAI;YACP,CAACkB,SAAS,GAAG,CAAC,IAAIlB,IAAI,CAACkB,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE;cAAEd,MAAM,EAAE,IAAI;cAAER,IAAI,EAAE,sBAAsB6B,WAAW;YAAK,CAAC;UAC3G,CAAC,CAAC,CAAC;UACH,IAAIpD,aAAa,EAAEA,aAAa,CAAC,CAAC;UAClCV,MAAM,CAAC4B,IAAI,CAAC,aAAa,EAAE;YAAEqB,MAAM,EAAErC,YAAY;YAAE2C;UAAU,CAAC,CAAC;QACnE,CAAC,CAAC;MACN,CAAC,CAAC;MACNnC,UAAU,CAAC,EAAE,CAAC;MACd;IACJ;IACA,IAAID,OAAO,CAAC0C,UAAU,CAAC,OAAO,CAAC,EAAE;MAC7B,MAAM,CAACkB,CAAC,EAAEC,UAAU,EAAE,GAAGC,QAAQ,CAAC,GAAG9D,OAAO,CAACiB,KAAK,CAAC,GAAG,CAAC;MACvD,MAAM8C,OAAO,GAAGD,QAAQ,CAACE,IAAI,CAAC,GAAG,CAAC;MAClC,IAAI,CAACH,UAAU,IAAI,CAACE,OAAO,EAAE,OAAOhE,KAAK,CAAC,8BAA8B,CAAC;MACzE8C,KAAK,CAAC,sCAAsCzD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,QAAQ,CAAC,CAC5DuC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACmB,KAAK,IAAI;QACX,IAAI,CAACA,KAAK,CAAClD,QAAQ,CAAC8C,UAAU,CAAC,EAAE;UAC7B1D,WAAW,CAAEe,IAAI,KAAM;YACnB,GAAGA,IAAI;YACP,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,GAAG,CAAC,IAAIW,IAAI,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;cAAEe,MAAM,EAAE,IAAI;cAAER,IAAI,EAAE,gBAAgB+C,UAAU;YAAgC,CAAC;UACrI,CAAC,CAAC,CAAC;UACH;QACJ;QACA;QACAhF,MAAM,CAAC4B,IAAI,CAAC,oBAAoB,EAAE;UAC9BqB,MAAM,EAAErC,YAAY;UACpBN,QAAQ,EAAES,cAAc;UACxBsC,UAAU,EAAE2B,UAAU;UACtB/C,IAAI,EAAEiD;QACV,CAAC,CAAC;QACF;MACJ,CAAC,CAAC;MACN9D,UAAU,CAAC,EAAE,CAAC;MACd;IACJ;IACA,IAAID,OAAO,CAAC0C,UAAU,CAAC,OAAO,CAAC,EAAE;MAC7B,MAAMwB,KAAK,GAAGlE,OAAO,CAACiB,KAAK,CAAC,GAAG,CAAC;MAChC,MAAMkD,MAAM,GAAGD,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;MAC7BrB,KAAK,CAAC,qCAAqCsB,MAAM,GAAG,SAASA,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CACxErB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;QACV9C,WAAW,CAAEe,IAAI,KAAM;UACnB,GAAGA,IAAI;UACP,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,GAAG,CAAC,IAAIW,IAAI,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;YAAEe,MAAM,EAAE,IAAI;YAAER,IAAI,EAAE,0BAA0BmC,IAAI,CAACmB,GAAG,CAAChB,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAACW,IAAI,CAAC,IAAI,CAAC;UAAG,CAAC;QACxI,CAAC,CAAC,CAAC;MACP,CAAC,CAAC;MACN/D,UAAU,CAAC,EAAE,CAAC;MACd;IACJ;IACA,IAAID,OAAO,CAAC0C,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC9B,IAAI,CAACtD,OAAO,IAAI,CAACA,OAAO,CAACmB,GAAG,EAAE;MAC9BsC,KAAK,CAAC,sCAAsCzD,OAAO,CAACmB,GAAG,QAAQ,CAAC,CAC3DuC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;QACV9C,WAAW,CAAEe,IAAI,KAAM;UACnB,GAAGA,IAAI;UACP,CAAC9B,OAAO,CAACmB,GAAG,GAAG,CAAC,IAAIW,IAAI,CAAC9B,OAAO,CAACmB,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;YAAEe,MAAM,EAAE,IAAI;YAAER,IAAI,EAAE,kCAAkCmC,IAAI,CAACe,IAAI,CAAC,IAAI,CAAC;UAAG,CAAC;QAC7H,CAAC,CAAC,CAAC;MACP,CAAC,CAAC;MACN/D,UAAU,CAAC,EAAE,CAAC;MACd;IACJ;IACA,IAAID,OAAO,CAAC0C,UAAU,CAAC,UAAU,CAAC,EAAE;MAChC,MAAMC,WAAW,GAAG3C,OAAO,CAACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACzC,IAAI,CAAC0B,WAAW,EAAE,OAAO5C,KAAK,CAAC,iDAAiD,CAAC;MACjF,MAAMsE,KAAK,GAAG3E,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3CkD,KAAK,CAAC,oCAAoC,EAAE;QACxCU,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUa,KAAK;QACpC,CAAC;QACDZ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEN,IAAI,EAAEV;QAAY,CAAC;MAC9C,CAAC,CAAC,CACGG,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;QACV9C,WAAW,CAAEe,IAAI,KAAM;UACnB,GAAGA,IAAI;UACP,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,GAAG,CAAC,IAAIW,IAAI,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;YAAEe,MAAM,EAAE,IAAI;YAAER,IAAI,EAAEmC,IAAI,CAACjD,OAAO,IAAI;UAAkB,CAAC;QAC7G,CAAC,CAAC,CAAC;QACH,IAAIT,aAAa,EAAEA,aAAa,CAAC,CAAC;MACtC,CAAC,CAAC;MACNU,UAAU,CAAC,EAAE,CAAC;MACd;IACJ;IACA;IACA,MAAMqE,aAAa,GAAG,MAAM;IAE5B,IAAI,CAAClF,OAAO,IAAI,CAACA,OAAO,CAACmB,GAAG,EAAE;MAC1B;MACA,IAAIP,OAAO,CAAC0C,UAAU,CAAC,SAAS,CAAC,IAAI1C,OAAO,CAAC0C,UAAU,CAAC,OAAO,CAAC,IAAI1C,OAAO,CAAC0C,UAAU,CAAC,MAAM,CAAC,EAAE;QAC5F;MAAA,CACH,MAAM;QACHvC,WAAW,CAAEe,IAAI,KAAM;UACnB,GAAGA,IAAI;UACP,CAACoD,aAAa,GAAG,CAAC,IAAIpD,IAAI,CAACoD,aAAa,CAAC,IAAI,EAAE,CAAC,EAAE;YAAEhD,MAAM,EAAE,IAAI;YAAER,IAAI,EAAE;UAAuE,CAAC;QACpJ,CAAC,CAAC,CAAC;QACHb,UAAU,CAAC,EAAE,CAAC;QACd;MACJ;IACJ;IACA;IACApB,MAAM,CAAC4B,IAAI,CAAC,aAAa,EAAE;MACvBqB,MAAM,EAAErC,YAAY;MACpBN,QAAQ,EAAES,cAAc;MACxBwC,SAAS,EAAEhD,OAAO,CAACmB,GAAG;MACtBO,IAAI,EAAEd,OAAO,CAACyC,IAAI,CAAC;IACvB,CAAC,CAAC;IACFxC,UAAU,CAAC,EAAE,CAAC;EAClB,CAAC;;EAED;EACA,MAAM2C,aAAa,GAAG,MAAOD,WAAW,IAAK;IACzC,IAAI;MACA,MAAM0B,KAAK,GAAG3E,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAM4E,QAAQ,GAAG,MAAM1B,KAAK,CAAC,oCAAoC,EAAE;QAC/DU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUa,KAAK;QACpC,CAAC;QACDZ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEN,IAAI,EAAEV,WAAW;UAAE6B,OAAO,EAAE5E;QAAe,CAAC;MACvE,CAAC,CAAC;MACF,MAAMqD,IAAI,GAAG,MAAMsB,QAAQ,CAACvB,IAAI,CAAC,CAAC;MAClC,IAAIuB,QAAQ,CAACE,EAAE,EAAE;QACbtE,WAAW,CAAEe,IAAI,KAAM;UACnB,GAAGA,IAAI;UACP,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,GAAG,CAAC,IAAIW,IAAI,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;YAAEe,MAAM,EAAE,IAAI;YAAER,IAAI,EAAE,YAAY6B,WAAW;UAAW,CAAC;QAC7G,CAAC,CAAC,CAAC;QACHrD,WAAW,CAAE4B,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE+B,IAAI,CAAC,CAAC;QACtC,IAAI1D,aAAa,EAAEA,aAAa,CAAC,CAAC;MACtC,CAAC,MAAM;QACHY,WAAW,CAAEe,IAAI,KAAM;UACnB,GAAGA,IAAI;UACP,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,GAAG,CAAC,IAAIW,IAAI,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;YAAEe,MAAM,EAAE,IAAI;YAAER,IAAI,EAAEmC,IAAI,CAACjD,OAAO,IAAI;UAAuC,CAAC;QAClI,CAAC,CAAC,CAAC;MACP;IACJ,CAAC,CAAC,OAAO0E,GAAG,EAAE;MACVvE,WAAW,CAAEe,IAAI,KAAM;QACnB,GAAGA,IAAI;QACP,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,GAAG,CAAC,IAAIW,IAAI,CAAC9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;UAAEe,MAAM,EAAE,IAAI;UAAER,IAAI,EAAE;QAAgD,CAAC;MAC3H,CAAC,CAAC,CAAC;IACP;IACAb,UAAU,CAAC,EAAE,CAAC;EAClB,CAAC;;EAED;EACA,MAAM0E,aAAa,GAAIC,CAAC,IAAK;IACzB,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;MACnBD,CAAC,CAACE,cAAc,CAAC,CAAC;MAClBtC,iBAAiB,CAAC,CAAC;IACvB;EACJ,CAAC;EAED,oBACIzD,OAAA;IAAKgG,SAAS,EAAC,UAAU;IAAAC,QAAA,GACpB5F,OAAO,IAAIA,OAAO,CAACiE,IAAI,gBACpBtE,OAAA,CAAAE,SAAA;MAAA+F,QAAA,gBACIjG,OAAA;QAAKgG,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAC1B5F,OAAO,CAACiE;MAAI;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eACNrG,OAAA;QAAKgG,SAAS,EAAC,cAAc;QAAAC,QAAA,GACxB1E,eAAe,CAAC8D,GAAG,CAAC,CAACzD,GAAG,EAAE0E,KAAK,kBAC5BtG,OAAA;UAAiBgG,SAAS,EAAE,UAAUpE,GAAG,CAACW,MAAM,GAAG,SAAS,GAAG,EAAE,GAAGX,GAAG,CAACoB,OAAO,GAAG,UAAU,GAAG,EAAE,EAAG;UAAAiD,QAAA,gBAChGjG,OAAA;YAAGgG,SAAS,EAAC,cAAc;YAAAC,QAAA,GACtBrE,GAAG,CAACW,MAAM,GAAG,WAAW,GAAGX,GAAG,CAACoB,OAAO,GAClCpB,GAAG,CAACqB,QAAQ,GACT,YAAYrB,GAAG,CAACsB,SAAS,GAAG,GAC5B,YAAYtB,GAAG,CAACsB,SAAS,GAAG,GAC/BtB,GAAG,CAACmB,MAAM,KAAKrC,YAAY,IAAIkB,GAAG,CAACxB,QAAQ,KAAKS,cAAc,GAAG,MAAM,GAAGe,GAAG,CAACxB,QAAS,EAC3F,GAAC,EAACwB,GAAG,CAAC2E,SAAS,GAAG,IAAIC,IAAI,CAAC5E,GAAG,CAAC2E,SAAS,CAAC,CAACE,cAAc,CAAC,CAAC,GAAG,EAAE;UAAA;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjE,CAAC,eACJrG,OAAA;YAAAiG,QAAA,EAAIrE,GAAG,CAACG;UAAI;YAAAmE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GATXC,KAAK;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUV,CACR,CAAC,eACFrG,OAAA;UAAK0G,GAAG,EAAErF;QAAe;UAAA6E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B,CAAC;IAAA,eACR,CAAC,gBAEHrG,OAAA;MAAKgG,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAEpC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACR,eACDrG,OAAA;MAAKgG,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACvBjG,OAAA;QACI2G,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE3F,OAAQ;QACf4F,QAAQ,EAAGhB,CAAC,IAAK3E,UAAU,CAAC2E,CAAC,CAACiB,MAAM,CAACF,KAAK,CAAE;QAC5CG,SAAS,EAAEnB,aAAc;QACzBoB,WAAW,EAAE3G,OAAO,IAAIA,OAAO,CAACiE,IAAI,GAChC,kEAAkE,GAClE;MACH;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eACFrG,OAAA;QAAQiH,OAAO,EAAExD,iBAAkB;QAAAwC,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC5F,EAAA,CAtZIN,aAAa;AAAA+G,EAAA,GAAb/G,aAAa;AAwZnB,eAAeA,aAAa;AAAC,IAAA+G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}