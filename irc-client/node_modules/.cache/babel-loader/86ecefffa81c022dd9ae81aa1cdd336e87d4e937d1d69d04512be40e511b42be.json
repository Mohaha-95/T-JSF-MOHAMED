{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\momod\\\\T-JSF-600-PAR_2\\\\irc-client\\\\src\\\\Chatcomponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport './Chatcomponent.css';\nimport socket from './socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = ({\n  username,\n  channel,\n  channels,\n  setChannels,\n  fetchChannels\n}) => {\n  _s();\n  const storedUserId = localStorage.getItem('userId');\n  const storedUsername = localStorage.getItem('username');\n  if (!storedUserId || !storedUsername) {\n    console.warn(\"‚ö†Ô∏è userId ou username manquant dans localStorage !\");\n    alert(\"Votre session a expir√©. Veuillez vous reconnecter.\");\n    // Rediriger l'utilisateur vers la page de connexion si besoin\n    // window.location.href = \"/login\";\n  }\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n  console.log(\"üîé Utilisateur :\", {\n    storedUsername,\n    storedUserId\n  });\n\n  // Charger l'historique du channel actif\n  useEffect(() => {\n    if (channel && channel._id) {\n      socket.emit('fetchChannelMessages', channel._id);\n      setMessages([]); // Reset messages lors du changement de channel\n    }\n  }, [channel]);\n\n  // √âcoute des messages du channel, messages syst√®me et priv√©s\n  useEffect(() => {\n    const handleNewMessage = msg => {\n      if (msg.channel === channel._id) setMessages(prev => [...prev, msg]);\n    };\n    const handleSystemMessage = msg => {\n      if (msg.channel === channel._id) setMessages(prev => [...prev, {\n        ...msg,\n        system: true\n      }]);\n    };\n    const handleLoadChannelMessages = msgs => {\n      setMessages(msgs);\n    };\n    const handlePrivateMessage = msg => {\n      if (msg.to === storedUserId || msg.userId === storedUserId) setMessages(prev => [...prev, {\n        ...msg,\n        private: true\n      }]);\n    };\n    socket.on('newMessage', handleNewMessage);\n    socket.on('systemMessage', handleSystemMessage);\n    socket.on('loadChannelMessages', handleLoadChannelMessages);\n    socket.on('privateMessage', handlePrivateMessage);\n    return () => {\n      socket.off('newMessage', handleNewMessage);\n      socket.off('systemMessage', handleSystemMessage);\n      socket.off('loadChannelMessages', handleLoadChannelMessages);\n      socket.off('privateMessage', handlePrivateMessage);\n    };\n  }, [channel, storedUserId]);\n\n  // Scroll automatique\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Gestion de l'envoi de message\n  const handleSendMessage = () => {\n    if (!storedUserId || !storedUsername) return;\n    if (message.trim() === '') return;\n    if (message.startsWith('/create ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez sp√©cifier un nom pour le canal.');\n      createChannel(channelName);\n      return;\n    }\n    if (message.startsWith('/join ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† rejoindre.');\n      fetch(`http://localhost:5000/api/channels?name=${channelName}`).then(res => res.json()).then(data => {\n        if (!data.length) {\n          setMessages(prev => [...prev, {\n            system: true,\n            text: `Channel \"${channelName}\" introuvable.`\n          }]);\n          return;\n        }\n        const channelId = data[0]._id;\n        fetch('http://localhost:5000/api/channels/join', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId: storedUserId,\n            channelId\n          })\n        }).then(() => {\n          setMessages(prev => [...prev, {\n            system: true,\n            text: `Rejoint le channel \"${channelName}\".`\n          }]);\n          if (fetchChannels) fetchChannels();\n        });\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/quit ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† quitter.');\n      fetch(`http://localhost:5000/api/channels?name=${channelName}`).then(res => res.json()).then(data => {\n        if (!data.length) {\n          setMessages(prev => [...prev, {\n            system: true,\n            text: `Channel \"${channelName}\" introuvable.`\n          }]);\n          return;\n        }\n        const channelId = data[0]._id;\n        fetch('http://localhost:5000/api/channels/quit', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId: storedUserId,\n            channelId\n          })\n        }).then(() => {\n          setMessages(prev => [...prev, {\n            system: true,\n            text: `Quitt√© le channel \"${channelName}\".`\n          }]);\n          if (fetchChannels) fetchChannels();\n        });\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/msg ')) {\n      const [_, toNickname, ...msgParts] = message.split(' ');\n      const msgText = msgParts.join(' ');\n      if (!toNickname || !msgText) return alert('Usage: /msg nickname message');\n      fetch(`http://localhost:5000/api/channels/${channel === null || channel === void 0 ? void 0 : channel._id}/users`).then(res => res.json()).then(users => {\n        if (!users.includes(toNickname)) {\n          setMessages(prev => [...prev, {\n            system: true,\n            text: `Utilisateur \"${toNickname}\" non trouv√© dans ce channel.`\n          }]);\n          return;\n        }\n        // Envoie le message priv√© via socket\n        socket.emit('sendPrivateMessage', {\n          userId: storedUserId,\n          username: storedUsername,\n          toUserId: null,\n          // √† am√©liorer si tu veux lier √† l'userId\n          text: msgText\n        });\n        setMessages(prev => [...prev, {\n          private: true,\n          text: `[√† ${toNickname}] ${msgText}`,\n          username: storedUsername,\n          createdAt: new Date()\n        }]);\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/list')) {\n      const parts = message.split(' ');\n      const filter = parts[1] || '';\n      fetch(`http://localhost:5000/api/channels${filter ? `?name=${filter}` : ''}`).then(res => res.json()).then(data => {\n        setMessages(prev => [...prev, {\n          system: true,\n          text: `Channels disponibles : ${data.map(c => c.name).join(', ')}`\n        }]);\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/users')) {\n      if (!channel || !channel._id) return;\n      fetch(`http://localhost:5000/api/channels/${channel._id}/users`).then(res => res.json()).then(data => {\n        setMessages(prev => [...prev, {\n          system: true,\n          text: `Utilisateurs dans ce channel : ${data.join(', ')}`\n        }]);\n      });\n      setMessage('');\n      return;\n    }\n    if (message.startsWith('/delete ')) {\n      const channelName = message.split(' ')[1];\n      if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† supprimer.');\n      const token = localStorage.getItem('token');\n      fetch(`http://localhost:5000/api/channels`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: channelName\n        })\n      }).then(res => res.json()).then(data => {\n        setMessages(prev => [...prev, {\n          system: true,\n          text: data.message || 'Canal supprim√©.'\n        }]);\n        if (fetchChannels) fetchChannels();\n      });\n      setMessage('');\n      return;\n    }\n    if (!channel || !channel._id) {\n      setMessages(prev => [...prev, {\n        system: true,\n        text: 'Veuillez cr√©er ou s√©lectionner un channel.'\n      }]);\n      setMessage('');\n      return;\n    }\n    // Message normal au channel (optimistic update)\n    setMessages(prev => [...prev, {\n      username: storedUsername,\n      text: message.trim(),\n      createdAt: new Date()\n    }]);\n    socket.emit('sendMessage', {\n      userId: storedUserId,\n      username: storedUsername,\n      channelId: channel._id,\n      text: message.trim()\n    });\n    setMessage('');\n  };\n\n  // Cr√©ation de channel\n  const createChannel = async channelName => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/api/channels', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: channelName,\n          creator: storedUsername\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessages(prev => [...prev, {\n          system: true,\n          text: `Channel \"${channelName}\" cr√©√© !`\n        }]);\n        setChannels(prev => [...prev, data]);\n        if (fetchChannels) fetchChannels();\n      } else {\n        setMessages(prev => [...prev, {\n          system: true,\n          text: data.message || 'Erreur lors de la cr√©ation du canal.'\n        }]);\n      }\n    } catch (err) {\n      setMessages(prev => [...prev, {\n        system: true,\n        text: 'Erreur lors de la cr√©ation du canal (r√©seau).'\n      }]);\n    }\n    setMessage('');\n  };\n\n  // Gestion de la touche \"Entr√©e\"\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-area\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message${msg.system ? ' system' : ''}${msg.private ? ' private' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message-meta\",\n          children: [msg.system ? '[SYST√àME]' : msg.private ? '[PRIV√â]' : msg.username, \" \", msg.createdAt ? new Date(msg.createdAt).toLocaleString() : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        onKeyDown: handleKeyDown,\n        placeholder: \"Tapez votre message, /create [nom] ou /msg [pseudo] [message]...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatComponent, \"mrzO88jBQmJfUNtWUeukQppgA/o=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","socket","jsxDEV","_jsxDEV","ChatComponent","username","channel","channels","setChannels","fetchChannels","_s","storedUserId","localStorage","getItem","storedUsername","console","warn","alert","message","setMessage","messages","setMessages","messagesEndRef","log","_id","emit","handleNewMessage","msg","prev","handleSystemMessage","system","handleLoadChannelMessages","msgs","handlePrivateMessage","to","userId","private","on","off","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","startsWith","channelName","split","createChannel","fetch","then","res","json","data","length","text","channelId","method","headers","body","JSON","stringify","_","toNickname","msgParts","msgText","join","users","includes","toUserId","createdAt","Date","parts","filter","map","c","name","token","response","creator","ok","err","handleKeyDown","e","key","preventDefault","className","children","index","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","target","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/momod/T-JSF-600-PAR_2/irc-client/src/Chatcomponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\nimport './Chatcomponent.css';\r\nimport socket from './socket';\r\n\r\nconst ChatComponent = ({ username, channel, channels, setChannels, fetchChannels }) => {\r\n    const storedUserId = localStorage.getItem('userId');\r\n    const storedUsername = localStorage.getItem('username');\r\n\r\n    if (!storedUserId || !storedUsername) {\r\n        console.warn(\"‚ö†Ô∏è userId ou username manquant dans localStorage !\");\r\n        alert(\"Votre session a expir√©. Veuillez vous reconnecter.\");\r\n        // Rediriger l'utilisateur vers la page de connexion si besoin\r\n        // window.location.href = \"/login\";\r\n    }\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    console.log(\"üîé Utilisateur :\", { storedUsername, storedUserId });\r\n\r\n    // Charger l'historique du channel actif\r\n    useEffect(() => {\r\n        if (channel && channel._id) {\r\n            socket.emit('fetchChannelMessages', channel._id);\r\n            setMessages([]); // Reset messages lors du changement de channel\r\n        }\r\n    }, [channel]);\r\n\r\n    // √âcoute des messages du channel, messages syst√®me et priv√©s\r\n    useEffect(() => {\r\n        const handleNewMessage = (msg) => {\r\n            if (msg.channel === channel._id) setMessages((prev) => [...prev, msg]);\r\n        };\r\n        const handleSystemMessage = (msg) => {\r\n            if (msg.channel === channel._id) setMessages((prev) => [...prev, { ...msg, system: true }]);\r\n        };\r\n        const handleLoadChannelMessages = (msgs) => {\r\n            setMessages(msgs);\r\n        };\r\n        const handlePrivateMessage = (msg) => {\r\n            if (msg.to === storedUserId || msg.userId === storedUserId) setMessages((prev) => [...prev, { ...msg, private: true }]);\r\n        };\r\n        socket.on('newMessage', handleNewMessage);\r\n        socket.on('systemMessage', handleSystemMessage);\r\n        socket.on('loadChannelMessages', handleLoadChannelMessages);\r\n        socket.on('privateMessage', handlePrivateMessage);\r\n        return () => {\r\n            socket.off('newMessage', handleNewMessage);\r\n            socket.off('systemMessage', handleSystemMessage);\r\n            socket.off('loadChannelMessages', handleLoadChannelMessages);\r\n            socket.off('privateMessage', handlePrivateMessage);\r\n        };\r\n    }, [channel, storedUserId]);\r\n\r\n    // Scroll automatique\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }, [messages]);\r\n\r\n    // Gestion de l'envoi de message\r\n    const handleSendMessage = () => {\r\n        if (!storedUserId || !storedUsername) return;\r\n        if (message.trim() === '') return;\r\n        if (message.startsWith('/create ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez sp√©cifier un nom pour le canal.');\r\n            createChannel(channelName);\r\n            return;\r\n        }\r\n        if (message.startsWith('/join ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† rejoindre.');\r\n            fetch(`http://localhost:5000/api/channels?name=${channelName}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (!data.length) {\r\n                        setMessages((prev) => [...prev, { system: true, text: `Channel \"${channelName}\" introuvable.` }]);\r\n                        return;\r\n                    }\r\n                    const channelId = data[0]._id;\r\n                    fetch('http://localhost:5000/api/channels/join', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({ userId: storedUserId, channelId })\r\n                    }).then(() => {\r\n                        setMessages((prev) => [...prev, { system: true, text: `Rejoint le channel \"${channelName}\".` }]);\r\n                        if (fetchChannels) fetchChannels();\r\n                    });\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/quit ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† quitter.');\r\n            fetch(`http://localhost:5000/api/channels?name=${channelName}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (!data.length) {\r\n                        setMessages((prev) => [...prev, { system: true, text: `Channel \"${channelName}\" introuvable.` }]);\r\n                        return;\r\n                    }\r\n                    const channelId = data[0]._id;\r\n                    fetch('http://localhost:5000/api/channels/quit', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({ userId: storedUserId, channelId })\r\n                    }).then(() => {\r\n                        setMessages((prev) => [...prev, { system: true, text: `Quitt√© le channel \"${channelName}\".` }]);\r\n                        if (fetchChannels) fetchChannels();\r\n                    });\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/msg ')) {\r\n            const [_, toNickname, ...msgParts] = message.split(' ');\r\n            const msgText = msgParts.join(' ');\r\n            if (!toNickname || !msgText) return alert('Usage: /msg nickname message');\r\n            fetch(`http://localhost:5000/api/channels/${channel?._id}/users`)\r\n                .then(res => res.json())\r\n                .then(users => {\r\n                    if (!users.includes(toNickname)) {\r\n                        setMessages((prev) => [...prev, { system: true, text: `Utilisateur \"${toNickname}\" non trouv√© dans ce channel.` }]);\r\n                        return;\r\n                    }\r\n                    // Envoie le message priv√© via socket\r\n                    socket.emit('sendPrivateMessage', {\r\n                        userId: storedUserId,\r\n                        username: storedUsername,\r\n                        toUserId: null, // √† am√©liorer si tu veux lier √† l'userId\r\n                        text: msgText,\r\n                    });\r\n                    setMessages((prev) => [...prev, { private: true, text: `[√† ${toNickname}] ${msgText}`, username: storedUsername, createdAt: new Date() }]);\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/list')) {\r\n            const parts = message.split(' ');\r\n            const filter = parts[1] || '';\r\n            fetch(`http://localhost:5000/api/channels${filter ? `?name=${filter}` : ''}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages((prev) => [...prev, { system: true, text: `Channels disponibles : ${data.map(c => c.name).join(', ')}` }]);\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/users')) {\r\n            if (!channel || !channel._id) return;\r\n            fetch(`http://localhost:5000/api/channels/${channel._id}/users`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages((prev) => [...prev, { system: true, text: `Utilisateurs dans ce channel : ${data.join(', ')}` }]);\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (message.startsWith('/delete ')) {\r\n            const channelName = message.split(' ')[1];\r\n            if (!channelName) return alert('Veuillez sp√©cifier un nom de canal √† supprimer.');\r\n            const token = localStorage.getItem('token');\r\n            fetch(`http://localhost:5000/api/channels`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify({ name: channelName }),\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages((prev) => [...prev, { system: true, text: data.message || 'Canal supprim√©.' }]);\r\n                    if (fetchChannels) fetchChannels();\r\n                });\r\n            setMessage('');\r\n            return;\r\n        }\r\n        if (!channel || !channel._id) {\r\n            setMessages((prev) => [...prev, { system: true, text: 'Veuillez cr√©er ou s√©lectionner un channel.' }]);\r\n            setMessage('');\r\n            return;\r\n        }\r\n        // Message normal au channel (optimistic update)\r\n        setMessages((prev) => [...prev, { username: storedUsername, text: message.trim(), createdAt: new Date() }]);\r\n        socket.emit('sendMessage', {\r\n            userId: storedUserId,\r\n            username: storedUsername,\r\n            channelId: channel._id,\r\n            text: message.trim(),\r\n        });\r\n        setMessage('');\r\n    };\r\n\r\n    // Cr√©ation de channel\r\n    const createChannel = async (channelName) => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            const response = await fetch('http://localhost:5000/api/channels', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify({ name: channelName, creator: storedUsername }),\r\n            });\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setMessages((prev) => [...prev, { system: true, text: `Channel \"${channelName}\" cr√©√© !` }]);\r\n                setChannels((prev) => [...prev, data]);\r\n                if (fetchChannels) fetchChannels();\r\n            } else {\r\n                setMessages((prev) => [...prev, { system: true, text: data.message || 'Erreur lors de la cr√©ation du canal.' }]);\r\n            }\r\n        } catch (err) {\r\n            setMessages((prev) => [...prev, { system: true, text: 'Erreur lors de la cr√©ation du canal (r√©seau).' }]);\r\n        }\r\n        setMessage('');\r\n    };\r\n\r\n    // Gestion de la touche \"Entr√©e\"\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            handleSendMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-box\">\r\n            <div className=\"message-area\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message${msg.system ? ' system' : ''}${msg.private ? ' private' : ''}`}>\r\n                        <p className=\"message-meta\">\r\n                            {msg.system ? '[SYST√àME]' : msg.private ? '[PRIV√â]' : msg.username} {msg.createdAt ? new Date(msg.createdAt).toLocaleString() : ''}\r\n                        </p>\r\n                        <p>{msg.text}</p>\r\n                    </div>\r\n                ))}\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n            <div className=\"input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    onKeyDown={handleKeyDown}\r\n                    placeholder=\"Tapez votre message, /create [nom] ou /msg [pseudo] [message]...\"\r\n                />\r\n                <button onClick={handleSendMessage}>Envoyer</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}